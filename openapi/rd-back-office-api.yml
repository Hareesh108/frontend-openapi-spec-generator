openapi: 3.0.3
info:
  title: Customer Backoffice APIs
  description: |
    The API is based on REST principles. It uses standard HTTP response codes and verbs, and token-based authentication.
    All requests must be made over HTTPS with TLS 1.2+ and Server Name Indication enabled. HTTP requests over HTTP will fail.

    ## HTTP Verbs
    - **GET**: Retrieve a resource or collection of resources
    - **POST**: Create a resource
    - **PATCH**: Modify an existing resource
    - **PUT**: Replace an existing resource
    - **DELETE**: Delete a resource

    ## Request and Response Format
    - Use `Content-Type: application/json` for all PUT and POST requests (except when uploading documents or live photos, in which case, use `Content-Type: multipart/form-data`).
    - Responses return JSON, except for downloads.
    - Text fields support UTF-8 encoding but certain special characters are not allowed.
  version: 1.0.0
  contact:
    name: Contact our support
    email: hello@reldyn.co
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://reldyn.co/assets/images/logo.svg
    backgroundColor: "#ee0979"
    altText: Reldyn
servers:
  - url: http://192.168.68.100
    description: Development server
tags:
  - name: BackOffice
    description: This API allows you to manage customer data, including viewing information, unbinding devices, and accessing the customer's history and statistics.
  - name: User
    description: This API allows you to create, view, and manage user profiles, providing full control over user-related data.
  - name: UserRole
    description: This API allows you to create, view, and manage roles , providing full control over user role-related data.
paths:
  /customer/api/v1/back-office/customers/{id}:
    get:
      summary: Customer info
      description: Get the customer info.
      operationId: getCustomerDetails
      tags:
        - BackOffice
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The customer id to get profile details
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Customer info retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerDetailsResponse"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /customer/api/v1/back-office/customers/unbind-device:
    post:
      summary: Unbind customer device
      description: API to unbind customer device
      operationId: unbindDevice
      tags:
        - BackOffice
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Unbind successfull
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "401":
          description: Incorrect Credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /customer/api/v1/back-office/customers:
    get:
      summary: Retrieve all customers
      operationId: getCustomers
      description: Fetches a list of all customers with their details.
      tags:
        - BackOffice
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `name`
              - `email`
              - `mobile_number`
              - `id_number`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by customer email
              value: '[{ "email": { "op": "eq","values": [ "pooja@reldyn.co" ] } }]'
            example2:
              summary: Filter by customer name
              value: '[{ "first_name": { "op": "like","values": [ "Pooja" ] } }]'
        - name: page
          in: query
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - name: size
          in: query
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - name: sort
          in: query
          schema:
            type: array
            items:
              type: string
              example: full_name,desc
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id_number`
              - `first_name`
              - `last_name`
              - `full_name`
              - `created_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of accounts has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomersPaginatedResponse"
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /customer/api/v1/back-office/onboarding-history/{id}:
    get:
      summary: Get all onboarding steps
      operationId: getAllSteps
      description: API for onboarding history details
      tags:
        - BackOffice
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The customer id to get profile details
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of onboarding steps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OnboardingHistoryDetails"
  /customer/api/v1/back-office/get-onboarding-stats:
    get:
      summary: Retrieve onboarding customers statistics count
      description: Get the statistics count related to onboarding stages.
      operationId: getOnboardingCustomersStats
      tags:
        - BackOffice
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Ekyc review info retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnboardingCustomersStatsResponse"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /customer/api/v1/back-office/onboarding-customers:
    get:
      summary: Get list of onboarding customers.
      operationId: getOnboardingList
      description: Fetches a list of all onboarding customers with their details.
      tags:
        - BackOffice
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `name`
              - `email`
              - `mobile_number`
              - `id_number`
              - `stage`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by customer email
              value: '[{ "email": { "op": "eq", "values": ["pooja@reldyn.co"] } }]'
            example2:
              summary: Filter by customer name
              value: '[{ "first_name": { "op": "like", "values": ["Pooja"] } }]'
            example3:
              summary: Filter by onboarding stage
              value: '[{ "stage": { "op": "in", "values": ["STAGE_MOBILE_VERIFICATION", "STAGE_USERNAME", "STAGE_CREDENTIALS_PENDING"] } }]'
        - name: page
          in: query
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - name: size
          in: query
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - name: sort
          in: query
          schema:
            type: array
            items:
              type: string
              example: full_name,desc
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id_number`
              - `first_name`
              - `last_name`
              - `full_name`
              - `created_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of onboarding customers has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnboardingPaginatedResponse"
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /usermanagement/api/v1/users:
    post:
      summary: Create a new user
      description: Create a new user with the provided details.
      operationId: createUser
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
    get:
      summary: Retrieve a list of users
      description: Retrieve a list of users.
      operationId: getUsers
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `username`
              - `email`
              - `last_login_time`
              - `realm`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by user email
              value: '[{ "email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by username
              value: '[{ "username": { "op": "like","values": [ "Kent" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "username,desc"
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `username`
              - `email`
              - `last_login_time`
              - `realm`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of users fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPaginatedResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /usermanagement/api/v1/users/{id}:
    get:
      summary: Retrieve user details by ID
      description: Get details of a specific user.
      operationId: getUserById
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the user
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
    put:
      summary: Update an existing user details
      description: Update the details of a specific user.
      operationId: updateUser
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the user to update.
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
    delete:
      summary: Delete user from User management
      description: Delete user from User management.
      operationId: deleteUser
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: Unique identifier of the user.
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: User deleted successfully.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /usermanagement/api/v1/user-roles:
    post:
      summary: Create a new user role
      description: Create a new user role with the provided details.
      operationId: createUserRole
      tags:
        - UserRole
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRoleRequest"
      responses:
        "201":
          description: User role created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
    get:
      summary: Retrieve a list of user-roles
      description: Retrieve a list of user-roles.
      operationId: getUserRoles
      tags:
        - UserRole
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `name`
              - `description`
              - `active`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by user-role name
              value: '[{ "name": { "op": "eq","values": [ "ADMIN" ] } }]'
            example2:
              summary: Filter by name
              value: '[{ "name": { "op": "like","values": [ "USER" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "name,desc"
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `description`
              - `active`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of user-role fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRolePaginatedResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /usermanagement/api/v1/user-roles/{id}:
    get:
      summary: Retrieve user role details by ID
      description: Get details of a specific user role.
      operationId: getUserRoleById
      tags:
        - UserRole
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the user role
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: query
          name: detail
          required: false
          schema:
            type: string
            enum:
              - FULL
              - BASIC
          description: Level of detail required in the response. FULL returns all details, BASIC returns minimal details.
      responses:
        "200":
          description: User role details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
    put:
      summary: Update an existing user role
      description: Update the details of a specific user role.
      operationId: updateUserRole
      tags:
        - UserRole
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the user role to update.
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRoleRequest"
      responses:
        "200":
          description: User role updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRoleResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
    delete:
      summary: Delete a user role
      description: Delete a user role from the system.
      operationId: deleteUserRole
      tags:
        - UserRole
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: Unique identifier of the user role.
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: User role deleted successfully.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /usermanagement/api/v1/user-permissions:
    post:
      summary: Create a new user permission
      description: Create a new user permission with the provided details.
      operationId: createUserPermission
      tags:
        - UserPermission
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPermissionRequest"
      responses:
        "201":
          description: User permission created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPermissionResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
    get:
      summary: Retrieve a list of user-permissions
      description: Retrieve a list of user-permissions.
      operationId: getUserPermissions
      tags:
        - UserPermission
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `name`
              - `description`
              - `active`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by user-role name
              value: '[{ "name": { "op": "eq","values": [ "ONBOARDING_CREATE" ] } }]'
            example2:
              summary: Filter by name
              value: '[{ "name": { "op": "like","values": [ "ONBOARDING" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "name,desc"
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `description`
              - `active`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of user-permission fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPermissionPaginatedResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
  /usermanagement/api/v1/user-permissions/{id}:
    get:
      summary: Retrieve user permission details by ID
      description: Get details of a specific user permission.
      operationId: getUserPermissionById
      tags:
        - UserPermission
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the user permission
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: User permission details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPermissionResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
    put:
      summary: Update an existing user permission
      description: Update the details of a specific user permission.
      operationId: updateUserPermission
      tags:
        - UserPermission
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the user permission to update.
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPermissionRequest"
      responses:
        "200":
          description: User permission updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPermissionResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
    delete:
      summary: Delete a user permission
      description: Delete a user permission from the system.
      operationId: deleteUserPermission
      tags:
        - UserPermission
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the user permission.
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "204":
          description: User permission deleted successfully.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CustomersPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/CustomerDetailsResponse"
        total_elements:
          type: integer
          example: 1
        total_pages:
          type: integer
          example: 1
    BasicAccountDetail:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the account.
        customerId:
          type: string
          description: Unique identifier of the customer associated with the account.
        accountNumber:
          type: string
          description: Unique account number.
        preferredAccountName:
          type: string
          description: Customer name.
        accountStatus:
          type: string
          description: The current status of the account.
          $ref: "#/components/schemas/AccountStatus"
        availableBalance:
          type: number
          description: The available balance of the account.
          example: "25000.50"
        totalBalance:
          type: number
          description: The available balance of the account.
          example: "25000.50"
        encodedKey:
          type: string
          description: The encoded key of the deposit account, which is auto-generated and unique.
    CustomerDetailsResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/BasicAccountDetail"
        id:
          type: string
          format: uuid
          description: Unique identifier for the customer record.
          example: 123e4567-e89b-12d3-a456-426614174000
        firstName:
          type: string
          description: Customer's first name.
          example: Ahmad
        lastName:
          type: string
          description: Customer's last name.
          example: Bin Ali
        fullName:
          type: string
          description: Full name of the customer.
          example: Ahmad Bin Ali
        mobileNumber:
          type: string
          description: Customer's mobile phone number.
          example: "1234567890"
        email:
          type: string
          format: email
          description: Customer's email address.
          example: example@example.com
        gender:
          type: string
          description: Customer's gender.
          example: Male
        idAddressLine1:
          type: string
          description: First line of the address on the customer's ID.
          example: No. 12, Jalan Tun Razak
        idAddressLine2:
          type: string
          description: Second line of the address on the customer's ID.
          example: Taman Permai Indah
        idAddressLine3:
          type: string
          description: Third line of the address on the customer's ID (if applicable).
          example: ""
        idAddressZipCode:
          type: string
          description: Zip code of the customer's ID address.
          example: "50400"
        idAddressCity:
          type: string
          description: City of the customer's ID address.
          example: Kuala Lumpur
        idAddressState:
          type: string
          description: State of the customer's ID address.
          example: Wilayah Persekutuan
        idAddressCountry:
          type: string
          description: Country of the customer's ID address.
          example: Malaysia
    OnboardingHistoryDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        createdAt:
          type: string
          format: date-time
    OnboardingCustomersStatsResponse:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total count of all onboarding customers.
        registrationCount:
          type: integer
          description: Count of customers whose PIN setup process is either in progress or completed.
        identityVerificationCount:
          type: integer
          description: Count of customers whose identity verification process is either in progress or completed.
        accountSetupCount:
          type: integer
          description: Count of customers whose account setup process is either in progress or completed
        creditTransferCount:
          type: integer
          description: Count of customers whose credit transfer process is either in progress or completed
    AccountStatus:
      type: string
      description: The current status of the account.
      enum:
        - ACTIVE
        - INACTIVE
        - CANCELLED
        - BLOCKED
        - DORMANT
        - DECEASED
        - PENDING_CLOSE
        - CLOSED
    OnboardingPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/OnboardingDetailsResponse"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    OnboardingDetailsResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the customer
          example: "12345"
        firstName:
          type: string
          description: First name of the customer
          example: John
        lastName:
          type: string
          description: Last name of the customer
          example: Doe
        mobileNumber:
          type: string
          description: Mobile phone number of the customer
          example: "+1234567890"
        email:
          type: string
          format: email
          description: Email address of the customer
          example: john.doe@example.com
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the customer was created
          example: "2024-02-13T12:34:56Z"
        modifiedAt:
          type: string
          format: date-time
          description: Timestamp when the customer record was last modified
          example: "2024-02-14T12:34:56Z"
        stage:
          type: string
          description: Current stage of the onboarding process
          example: STAGE_CREDENTIALS_PENDING
        status:
          type: string
          description: Current status of the customer onboarding
          example: CREDENTIALS_CREATION_PENDING
    UserResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        createdAt:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        modifiedAt:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        deletedAt:
          type: string
          format: date-time
          description: Timestamp when the user was deleted
          example: "2021-02-01T12:34:56Z"
        deleted:
          type: boolean
          description: Indicates user is deleted
          example: false
        version:
          type: integer
          description: version of user entity
          example: 0
        username:
          type: string
          description: Username of the user
          example: axel
        iamUserId:
          type: string
          description: Iam ID of the user
          example: ff9fed9e-c42a-42b3-8020-9b434c1ba9c6
        phoneNo:
          type: string
          description: Phone number of the user
          example: 123456789
        email:
          type: string
          description: Email of the user
          example: axel@reldyn.co
        lastLoginTime:
          type: string
          format: date-time
          description: Last login time of the user
          example: "2021-02-01T12:34:56Z"
        realm:
          type: string
          description: |-
            Realm role of the user
            - Values include:
              - `RD_BAAS_BACKOFFICE`
              - `RDI_PORTAL`
          enum:
            - "RD_BAAS_BACKOFFICE"
            - "RDI_PORTAL"
          example: RDI_PORTAL
    UserPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserResponse"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    UserCreationRequest:
      type: object
      properties:
        username:
          type: string
          description: Username of the user
          example: MohammedAli
        email:
          type: string
          description: Email of the user
          example: ali@reldyn.co
        phoneNo:
          type: string
          description: Phone number of the user
          example: 123456
        realm:
          type: string
          description: |-
            Realm role of the user
            - Values include:
              - `RD_BAAS_BACKOFFICE`
              - `RDI_PORTAL`
          enum:
            - "RD_BAAS_BACKOFFICE"
            - "RDI_PORTAL"
          example: RDI_PORTAL
      required:
        - username
        - email
        - realm
        - phoneNo
    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
          description: Email of the user
          example: ali@reldyn.co
        phoneNo:
          type: string
          description: Phone number of the user
          example: 123456789
      required:
        - email
        - phoneNo
    UserRoleRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the user role
          example: "Admin"
        description:
          type: string
          description: Description of the user role
          example: "Administrator role with full access"
        active:
          type: boolean
          description: Role visibility
          example: true
        permissionIds:
          type: array
          items:
            type: string
          description: List of permission IDs associated with the role
          example:
            [
              "123e4567-e89b-12d3-a456-426614174000",
              "223e4567-e89b-12d3-a456-426614174001",
            ]
      required:
        - name
        - permissionIds
    UserRoleResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user role
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the user role
          example: "Admin"
        description:
          type: string
          description: Description of the user role
          example: "Administrator role with full access"
        active:
          type: boolean
          description: Role visibility
          example: true
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/UserPermissionResponse"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user role was created
          example: "2021-02-01T12:34:56Z"
        modifiedAt:
          type: string
          format: date-time
          description: Timestamp when the user role was last updated
          example: "2021-02-01T12:34:56Z"
        deletedAt:
          type: string
          format: date-time
          description: Timestamp when the user role was deleted
          example: "2021-02-01T12:34:56Z"
        deleted:
          type: boolean
          description: Indicates user role is deleted
          example: false
        version:
          type: integer
          description: version of role
          example: 0
    UserRoleDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user role
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the user role
          example: "Admin"
        description:
          type: string
          description: Description of the user role
          example: "Administrator role with full access"
        active:
          type: boolean
          description: Role visibility
          example: true
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user role was created
          example: "2021-02-01T12:34:56Z"
        modifiedAt:
          type: string
          format: date-time
          description: Timestamp when the user role was last updated
          example: "2021-02-01T12:34:56Z"
        deletedAt:
          type: string
          format: date-time
          description: Timestamp when the user role was deleted
          example: "2021-02-01T12:34:56Z"
        version:
          type: integer
          description: version of role
          example: 0
    UserRolePaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserRoleDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    UserPermissionRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the user permission
          example: "READ"
        description:
          type: string
          description: Description of the user permission
          example: "Permission for MENU "
        permissionType:
          $ref: "#/components/schemas/PermissionType"
        active:
          type: boolean
          description: Indicates if the user permission is active.
          example: true
      required:
        - name
        - permissionType
    UserPermissionResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user permission
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the user permission
          example: "READ"
        description:
          type: string
          description: Description of the user permission
          example: "Permission to read data"
        permissionType:
          $ref: "#/components/schemas/PermissionType"
        active:
          type: boolean
          description: Indicates if the user permission is active.
          example: true
        deleted:
          type: boolean
          description: Indicates permission is deleted
          example: false
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user permission was created
          example: "2021-02-01T12:34:56Z"
        modifiedAt:
          type: string
          format: date-time
          description: Timestamp when the user permission was last updated
          example: "2021-02-01T12:34:56Z"
        deletedAt:
          type: string
          format: date-time
          description: Timestamp when the user permission was deleted
          example: "2021-02-01T12:34:56Z"
        version:
          type: integer
          description: version of permission
          example: 0
    PermissionType:
      type: string
      description: |-
        Realm role of the user
        - Values include:
          - `MENU`
          - `BUTTON`
          - `TAB`
      enum:
        - "MENU"
        - "BUTTON"
        - "TAB"
    UserPermissionPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserPermissionResponse"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    GlobalErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the error occurred
          example: "2024-10-07T16:51:24.595+08:00"
        code:
          type: string
          description: Error code indicating the issue
          example: ONB-0001
        message:
          type: string
          description: Error message that describes the issue
          example: Error message
        path:
          type: string
          description: The endpoint path where the error occurred
