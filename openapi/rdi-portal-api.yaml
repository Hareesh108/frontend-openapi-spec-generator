openapi: 3.0.3
info:
  version: 1.0.0
  title: RDI Portal API
  contact:
    name: Contact our support
    email: hello@reldyn.co
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: >
    Included below are the API Endpoints available within the Reldyn Identity
    (RDI) Portal API. <br><br> There are many OpenAPI Tools available for you to
    work directly with the OpenAPI Specification, if desired. For instance, you
    may leverage code generation tools to generate client libraries in any one
    of the support languages and frameworks.
  x-logo:
    url: 'https://reldyn.co/assets/images/logo.svg'
    backgroundColor: '#ee0979'
    altText: Reldyn
servers:
  - url: 'https://5yhs323cfd.execute-api.ap-south-1.amazonaws.com/platform'
    description: Development server
tags:
  - name: Authentication
    description: API for obtaining OAuth 2.0 tokens using password grant.
  - name: Admins
    description: The API allows you to view and manage the organizations.
  - name: Collaborations
    description: The API allows you to view account's collaborations.
  - name: Requests
    description: The API allows you to view requests.
  - name: Reasons
    description: The API allows you to view and manage reasons.
paths:
  /auth/realms/rdi-portal/protocol/openid-connect/token:
    post:
      summary: Generate an access token
      description: |
        This endpoint issues an OAuth 2.0 token using the password grant type.
      operationId: generateAccessToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: The OAuth 2.0 grant type (should be "password").
                  example: password
                username:
                  type: string
                  description: The user's username.
                  example: johndoe
                password:
                  type: string
                  description: The user's password.
                  example: secret_password
              required:
                - grant_type
                - username
                - password
      responses:
        '200':
          description: Successful response with OAuth 2.0 tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The OAuth 2.0 access token.
                    example: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIxOW...
                  expires_in:
                    type: integer
                    description: The number of seconds until the access token expires.
                    example: 299
                  refresh_expires_in:
                    type: integer
                    description: The number of seconds until the refresh token expires.
                    example: 1799
                  refresh_token:
                    type: string
                    description: The OAuth 2.0 refresh token.
                    example: eyJhbGciOiJIUzUxMiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIx...
                  token_type:
                    type: string
                    description: 'The type of token (e.g., "Bearer").'
                    example: Bearer
                  not-before-policy:
                    type: integer
                    example: 0
                  session_state:
                    type: string
                    description: Session state identifier.
                    example: bac70a91-02cb-4e24-877a-85e90cd7ecef
                  scope:
                    type: string
                    description: The granted scopes for this token.
                    example: email profile
        '400':
          description: 'Invalid request (e.g., missing or invalid parameters).'
        '401':
          description: 'Unauthorized (e.g., invalid client credentials).'
      security:
        - basicAuth: []
  /auth/realms/rdi-portal/protocol/openid-connect/userinfo:
    get:
      summary: Retrieve user info
      description: >
        This endpoint retrieves user information such as subject ID, email
        verification status, and preferred username using a Bearer token.
      operationId: retrieveUserInfo
      tags:
        - Authentication
      responses:
        '200':
          description: Successful response with user info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: The unique identifier for the user (subject).
                    example: 922301cb-aec5-4cfd-bb08-94adef4f51ed
                  email_verified:
                    type: boolean
                    description: Indicates if the user's email is verified.
                    example: false
                  realm_access:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
                        description: Roles assigned to the user within the realm.
                        example:
                          - admin
                  preferred_username:
                    type: string
                    description: The user's preferred username.
                    example: admin@reldyn.co
        '401':
          description: 'Unauthorized access (e.g., missing or invalid Bearer token).'
      security:
        - bearerAuth: []
  /api/v1/admins/organizations:
    post:
      summary: Create a new organization
      description: Creates a new organization.
      operationId: createOrganization
      tags:
        - Admins
      requestBody:
        description: Organization creation details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - org_name
                - org_registration_no
              properties:
                org_name:
                  type: string
                  description: Name of the organization
                  example: Bank Islam
                org_registration_no:
                  type: string
                  description: Registration no of the organization
                  example: 1234567890
                org_contact_no:
                  type: string
                  description: Contact phone number for the organization
                  example: '+601234567890'
                org_contact_name:
                  type: string
                  description: Contact name for the organization
                  example: Darren
                org_email:
                  type: string
                  format: email
                  description: Contact email for the organization
                  example: beu@beu.com
                note:
                  type: string
                  description: Note for the organization
                  example: >-
                    This organization focuses on providing technology solutions
                    for various industries.
                apps:
                  description: Selected app
                  type: array
                  uniqueItems: true
                  items:
                    type: string
                    example: ONFIDO
                    enum:
                      - ONFIDO
                      - JUMIO
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    get:
      summary: Retrieve a list of organizations
      description: Retrieves a list of all organizations.
      operationId: listOrganizations
      tags:
        - Admins
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `org_name`
              - `org_registration_no`
              - `org_status`
              - `org_contact_no`
              - `org_contact_name`
              - `org_email`
              - `note`
              - `org_logo_url`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by organization email
              value: '[{ "org_email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by organization name
              value: '[{ "org_name": { "op": "like","values": [ "Bank Islam" ] } }]'
            example3:
              summary: Filter by active status
              value: >-
                [{ "org_status": { "op": "in","values": [ "ACTIVE", "INACTIVE" ]
                } }]
            example4:
              summary: Filter by organization name and org_registration_no
              value: >-
                [{ "org_name": { "op": "like","values": [ "Bank Islam" ] } }, {
                "org_registration_no": { "op": "eq","values": [ "1234567890" ] }
                }]
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'org_name,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `org_name`
              - `org_registration_no`
              - `org_status`
              - `org_contact_no`
              - `org_contact_name`
              - `org_email`
              - `note`
              - `org_logo_url`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of organizations with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsPaginatedResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/admins/organizations/{organization_id}':
    get:
      summary: Retrieve a single organization
      description: Retrieves details of a single organization by its ID.
      operationId: getOrganization
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '200':
          description: Organization details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    put:
      summary: Update an organization
      description: Updates details of an existing organization.
      operationId: updateOrganization
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Updated organization details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - org_name
                - org_registration_no
                - org_status
              properties:
                org_name:
                  type: string
                  description: Name of the organization
                  example: Bank Islam
                org_registration_no:
                  type: string
                  description: Registration no of the organization
                  example: 1234567890
                org_status:
                  type: string
                  description: 'Status of the organization (e.g., active, inactive)'
                  enum:
                    - ACTIVE
                    - INACTIVE
                  example: ACTIVE
                org_contact_no:
                  type: string
                  description: Contact phone number for the organization
                  example: '+601234567890'
                org_contact_name:
                  type: string
                  description: Contact name for the organization
                  example: Darren
                org_email:
                  type: string
                  format: email
                  description: Contact email for the organization
                  example: beu@beu.com
                note:
                  type: string
                  description: Note for the organization
                  example: >-
                    This organization focuses on providing technology solutions
                    for various industries.
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete an organization
      description: Deletes an existing organization by id.
      operationId: deleteOrganization
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Organization deleted successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/admins/organizations/{organization_id}/apps':
    post:
      summary: Install the apps
      description: Install the apps.
      operationId: installApps
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: App details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apps
              properties:
                apps:
                  description: Selected app
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: string
                    example: ONFIDO
                    enum:
                      - ONFIDO
                      - JUMIO
      responses:
        '201':
          description: App installed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrgAppDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/admins/organizations/{organization_id}/apps/{app_id}':
    put:
      summary: Update apps details
      description: Updates apps details
      operationId: updateApps
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Unique identifier for the apps
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Updated apps details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                default_app_properties:
                  description: Custom properties of the app
                  type: object
                  example:
                    onfido.similarity_score_threshold: 0.8
                    onfido.similarity_checking_flag: false
      responses:
        '200':
          description: Apps details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgAppDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Uninstalls apps
      description: Uninstalls apps.
      operationId: uninstallApps
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Unique identifier for the apps
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Apps uninstalled successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/admins/organizations/{organization_id}/images':
    post:
      summary: Upload organization's logo
      description: Upload organization's logo
      operationId: uploadOrganizationLogo
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The image file to upload
      responses:
        '201':
          description: Organization's logo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete organization's logo
      description: Delete organization's logo
      operationId: deleteOrganizationLogo
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Organization's logo deleted successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/admins/organizations/{organization_id}/collaborators':
    get:
      summary: Retrieve a list of collaborators under the organization
      description: Retrieve a list of collaborators under the organization.
      operationId: listCollaborators
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by collaborators email
              value: '[{ "email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by collaborators name
              value: '[{ "name": { "op": "like","values": [ "Kent" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'name,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of collaborators with pagination details
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/AccountsWithAccessScopeInfoPaginatedResponse
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    post:
      summary: Create a new account / Link an existing account
      description: Creates a new account / Link an existing account.
      operationId: createAccount
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Account creation / linking details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - access_scope
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: Kent
                email:
                  type: string
                  description: Email of the user
                  example: kent@reldyn.co
                password:
                  type: string
                  description: Password of the user
                  example: Kent123456
                access_scope:
                  description: Selected access scope of the user
                  type: string
                  enum:
                    - owner
                    - creator
                    - editor
                    - viewer
                  example: viewer
                account_id:
                  description: Account id of an existing user for linking account
                  type: string
                  example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountWithAccessScopeInfoDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/admins/organizations/{organization_id}/collaborators/{account_id}':
    put:
      summary: Update account details
      description: Update account details.
      operationId: updateAccount
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier for the account
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Updated Account details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - access_scope
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: Kent
                email:
                  type: string
                  description: Email of the user
                  example: kent@reldyn.co
                access_scope:
                  description: Selected access scope of the user
                  type: string
                  enum:
                    - owner
                    - creator
                    - editor
                    - viewer
                  example: viewer
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountWithAccessScopeInfoDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete account from organization
      description: Delete account from organization.
      operationId: deleteAccount
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier for the account
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Account deleted successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/admins/accounts:
    get:
      summary: Retrieve a list of accounts
      description: Retrieve a list of accounts.
      operationId: listAccounts
      tags:
        - Admins
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by account email
              value: '[{ "email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by account name
              value: '[{ "name": { "op": "like","values": [ "Kent" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'name,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of accounts with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsPaginatedResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/collaborations:
    get:
      summary: Retrieve a list of organizations related to the currently logged-in user
      description: >-
        Retrieve a list of organizations related to the currently logged-in
        user.
      operationId: listCollaborations
      tags:
        - Collaborations
      responses:
        '200':
          description: A list of organizations with pagination details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollaborationDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/me:
    get:
      summary: Retrieves the authenticated user's information
      operationId: getUser
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/requests:
    get:
      summary: Requests listing
      description: Get the verification requests
      operationId: getRequests
      tags:
        - Requests
      parameters:
        - in: header
          name: orgid
          required: true
          schema:
            type: string
          description: The organization ID
          example: '111111'
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `app`
              - `request_status`
              - `customer_reference`
              - `client_id`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by request app
              value: '[{ "app": { "op": "eq","values": [ "ONFIDO" ] } }]'
            example2:
              summary: Filter by request status
              value: >-
                [{ "request_status": { "op": "in","values": [ "ACTIVE",
                "INACTIVE" ] } }]
            example3:
              summary: Filter by app and request status
              value: >-
                [{ "app": { "op": "like","values": [ "ONFIDO" ] } }, { "status":
                { "op": "eq","values": [ "ACTIVE" ] } }]
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'org_name,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `app`
              - `request_status`
              - `customer_reference`
              - `client_id`
              - `created_at`
              - `updated_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of request with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPaginatedResponse'
        '400':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/requests/{request_id}':
    get:
      summary: Retrieve request
      description: Get details of a request.
      operationId: getRequest
      tags:
        - Requests
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: string
          description: Unique reference of the request
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: header
          name: orgid
          required: true
          schema:
            type: string
          description: The organization ID
          example: '111111'
      responses:
        '200':
          description: Request details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestDetailDto'
        '400':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  /api/v1/reasons:
    get:
      summary: Retrieve a list of reasons
      description: Get a list of all reasons.
      operationId: getReasons
      tags:
        - Reasons
      parameters:
        - in: header
          name: orgid
          required: true
          schema:
            type: string
          description: The organization ID
          example: '111111'
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `name`
              - `description`
              - `app`
              - `organization_id`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`), provide a single value in the array.
              - Accepted types for values include strings.
          examples:
            example1:
              summary: Filter by reason name
              value: '[{ "name": { "op": "like", "values": [ "Sample Reason" ] } }]'
            example2:
              summary: Filter by application name
              value: '[{ "app": { "op": "eq", "values": [ "ONFIDO" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'name,asc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `description`
              - `app`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of reasons with pagination details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reason'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    post:
      summary: Create a new reason
      description: Create a new reason with the provided details.
      operationId: createReason
      tags:
        - Reasons
      parameters:
        - in: header
          name: orgid
          required: true
          schema:
            type: string
          description: The organization ID
          example: '111111'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the reason
                  example: mule
                description:
                  type: string
                  description: A detailed description of the reason
                  example: This is used for sample purposes.
                app:
                  type: string
                  description: The application associated with the reason
                  example: ONFIDO
              required:
                - name
                - app
      responses:
        '201':
          description: Reason created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/reasons/{id}':
    get:
      summary: Retrieve a reason by ID
      description: Get details of a specific reason.
      operationId: getReasonById
      tags:
        - Reasons
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the reason
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: orgid
          required: true
          schema:
            type: string
          description: The organization ID
          example: 111111
      responses:
        '200':
          description: Reason details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    put:
      summary: Update an existing reason
      description: Update the details of a specific reason.
      operationId: updateReason
      tags:
        - Reasons
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the reason
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: orgid
          required: true
          schema:
            type: string
          description: The organization ID
          example: '111111'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the reason
                  example: mule
                description:
                  type: string
                  description: A detailed description of the reason
                  example: This is used for sample purposes.
                app:
                  type: string
                  description: The application associated with the reason
                  example: ONFIDO
      responses:
        '200':
          description: Reason updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '404':
          description: Reason not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    delete:
      summary: Delete a reason
      description: Delete a specific reason.
      operationId: deleteReason
      tags:
        - Reasons
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the reason
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: orgid
          required: true
          schema:
            type: string
          description: The organization ID
          example: '111111'
      responses:
        '204':
          description: Reason deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '404':
          description: Reason not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
components:
  schemas:
    Role:
      type: string
      enum:
        - admin
        - org_user
        - viewer
        - editor
        - owner
      description: Possible roles assigned to the user.
    OrganizationDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the organization
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this organization
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this organization
          example: Foo
        org_name:
          type: string
          description: Name of the organization
          example: Bank Islam
        org_registration_no:
          type: string
          description: Registration no of the organization
          example: 1234567890
        org_status:
          type: string
          description: 'Status of the organization (e.g., active, inactive)'
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        org_primary_account_id:
          type: string
          description: >-
            Foreign key referencing the primary account associated with the
            organization
          example: 6722406b-e823-40a0-b691-ea187a1e364d
        org_contact_no:
          type: string
          description: Contact phone number for the organization
          example: '+601234567890'
        org_contact_name:
          type: string
          description: Contact name for the organization
          example: Darren
        org_email:
          type: string
          format: email
          description: Contact email for the organization
          example: beu@beu.com
        note:
          type: string
          description: Note for the organization
          example: >-
            This organization focuses on providing technology solutions for
            various industries.
        org_logo_url:
          type: string
          description: Logo url for the organization
          example: 'https://s3.ap-south-1.amazonaws.com/logo.jpg'
        apps:
          type: array
          items:
            $ref: '#/components/schemas/OrgAppDto'
    CollaborationDto:
      type: object
      properties:
        org_id:
          type: string
          description: Unique identifier for the organization
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        org_name:
          type: string
          description: Name of the organization
          example: Bank Islam
        access_scope:
          type: string
          description: Access rights granted to the user within the organization
          enum:
            - owner
            - creator
            - editor
            - viewer
          example: viewer
        apps:
          type: array
          items:
            type: string
            example: ONFIDO
    OrgAppDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the app
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this app
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this app
          example: Foo
        app_name:
          type: string
          description: Name of the app
          example: ONFIDO
        default_app_properties:
          description: Custom properties of the app
          type: object
          example:
            onfido.similarity_score_threshold: 0.8
            onfido.similarity_checking_flag: false
    AccountDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this user
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this user
          example: Foo
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        last_login_time:
          type: string
          format: date-time
          description: Last login time of the user
          example: '2021-02-01T12:34:56Z'
    AccountWithAccessScopeInfoDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this user
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this user
          example: Foo
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        last_login_time:
          type: string
          format: date-time
          description: Last login time of the user
          example: '2021-02-01T12:34:56Z'
        access_scope:
          type: string
          description: Access rights granted to the user within the organization
          enum:
            - owner
            - creator
            - editor
            - viewer
          example: viewer
    GlobalErrorResponseDto:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error occurred
          example: '2024-10-07T16:51:24.595+08:00'
        status:
          type: integer
          description: Error code indicating the issue
        message:
          type: string
          description: Error message that describes the issue
        path:
          type: string
          description: The endpoint path where the error occurred
          example: /v1/organizations
    OrganizationsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    AccountsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccountDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    AccountsWithAccessScopeInfoPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccountWithAccessScopeInfoDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    UserDetail:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        role:
          type: string
          description: Role of the user (admin/org_user)
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
    RequestDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the request
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        app:
          type: string
          description: Request app
          example: ONFIDO
        request_status:
          type: string
          description: Status of the request
          enum:
            - PROCESSING
            - REVIEW
            - APPROVED
            - DECLINED
            - ERROR
            - EXPIRED
          example: APPROVED
        customer_reference:
          type: string
          description: Unique identifier from channel request
          example: 6722406b-e823-40a0-b691-ea187a1e364d
        metadata:
          type: object
          description: Dynamic request information sent based on app
        client_id:
          type: string
          description: Request belong to which client
          example: +6722406b-e823-40a0-b691-ea187a1e364d
        client_name:
          type: string
          example: name for the client
    RequestDetailDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the request
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        app:
          type: string
          description: Request app
          example: ONFIDO
        request_status:
          type: string
          description: Status of the request
          enum:
            - PROCESSING
            - REVIEW
            - APPROVED
            - DECLINED
            - ERROR
            - EXPIRED
          example: APPROVED
        customer_reference:
          type: string
          description: Unique identifier from channel request
          example: 6722406b-e823-40a0-b691-ea187a1e364d
        metadata:
          type: object
          description: Dynamic request information sent based on app
        client_id:
          type: string
          description: Request belong to which client
          example: +6722406b-e823-40a0-b691-ea187a1e364d
        request_executions:
          type: array
          description: Request execution details
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique identifier for the request execution
                example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
              created_at:
                type: string
                format: date-time
                example: '2021-02-01T12:34:56Z'
              updated_at:
                type: string
                format: date-time
                example: '2021-02-01T12:34:56Z'
              execution_status:
                type: string
                description: 'Status for the request execution (PROCESSINS, SUCCESS, ERROR)'
                example: PROCESSING
              summary:
                type: object
                description: Dynamic basic result details of the response
              result:
                type: object
                description: Dynamic full result details of the response
              full_details_ready:
                type: boolean
                description: Indication of the readiness of result
              credentials:
                type: object
                description: Dynamic credential of the response
              request_execution_reasons:
                type: array
                description: Reason on failed request
                items:
                  type: object
                  properties:
                    reason:
                      type: string
                      description: Reason text on request rejected
                    manual_review:
                      type: boolean
                      description: Indication request is manual/auto rejected
        client_name:
          type: string
          example: name for the client
    RequestPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/RequestDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    GlobalErrorResponseDto1:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error occurred
          example: '2024-10-07T16:51:24.595+08:00'
        status:
          type: integer
          description: Error code indicating the issue
        message:
          type: string
          description: Error message that describes the issue
        path:
          type: string
          description: The endpoint path where the error occurred
          example: /v1/requests
    Reason:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the reason
          example: c2d35161-b8a9-47c8-88d2-7f6fcd29c561
        name:
          type: string
          description: The name of the reason
          example: mule
        description:
          type: string
          description: A detailed description of the reason
          example: Scam report on this account
        organization_id:
          type: string
          description: Id of the organization
          example: e2d76212-b8a9-63c8-69d2-7f6fcd42c532
        app:
          type: string
          description: Application of the organization
          example: ONFIDO
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
