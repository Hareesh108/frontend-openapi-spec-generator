openapi: 3.0.3
info:
  version: 1.0.0
  title: RDI Portal API
  contact:
    name: Contact our support
    email: hello@reldyn.co
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: >
    Included below are the API Endpoints available within the Reldyn Identity
    (RDI) Portal API. <br><br> There are many OpenAPI Tools available for you to
    work directly with the OpenAPI Specification, if desired. For instance, you
    may leverage code generation tools to generate client libraries in any one
    of the support languages and frameworks.
  x-logo:
    url: 'https://reldyn.co/assets/images/logo.svg'
    backgroundColor: '#ee0979'
    altText: Reldyn
servers:
  - url: 'https://5yhs323cfd.execute-api.ap-south-1.amazonaws.com/platform'
    description: Development server
tags:
  - name: Authentication
    description: API for obtaining OAuth 2.0 tokens using password grant.
  - name: Organization
    description: The API allows you to view and manage the organizations.
  - name: Application
    description: The API allows you to view and manage the applications.
  - name: Collaboration
    description: The API allows you to view account's collaborations.
  - name: Request
    description: The API allows you to view requests.
  - name: Reason
    description: The API allows you to view and manage reasons.
  - name: Collaborator
    description: The API allows you to view and manage collaborators.
  - name: Account
    description: The API allows you to view and manage accounts.
  - name: Channel
    description: The API allows you to view and manage channels.
paths:
  /auth/realms/rdi-portal/protocol/openid-connect/token:
    post:
      summary: Generate an access token or refresh tokens
      description: >
        This endpoint issues an OAuth 2.0 token. The behavior of the endpoint
        depends on the `grant_type`:

        - Use `grant_type=password` to obtain an access token.

        - Use `grant_type=refresh_token` to obtain a new set of tokens with an
        existing refresh token.
      operationId: generateAccessToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: >
                    The OAuth 2.0 grant type. Use `"password"` or
                    `"refresh_token"` for obtaining a new access token.
                  enum:
                    - password
                    - refresh_token
                username:
                  type: string
                  description: >-
                    The user's username. Required when `grant_type=password` is
                    used.
                password:
                  type: string
                  description: >-
                    The user's password. Required when `grant_type=password` is
                    used.
                refresh_token:
                  type: string
                  description: >-
                    The refresh token. Required when `grant_type=refresh_token`
                    is used.
              required:
                - grant_type
      responses:
        '200':
          description: Successful response with OAuth 2.0 tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The OAuth 2.0 access token.
                    example: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIxOW...
                  expires_in:
                    type: integer
                    description: The number of seconds until the access token expires.
                    example: 299
                  refresh_expires_in:
                    type: integer
                    description: The number of seconds until the refresh token expires.
                    example: 1799
                  refresh_token:
                    type: string
                    description: The OAuth 2.0 refresh token.
                    example: eyJhbGciOiJIUzUxMiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIx...
                  token_type:
                    type: string
                    description: 'The type of token (e.g., "Bearer").'
                    example: Bearer
                  not-before-policy:
                    type: integer
                    example: 0
                  session_state:
                    type: string
                    description: Session state identifier.
                    example: bac70a91-02cb-4e24-877a-85e90cd7ecef
                  scope:
                    type: string
                    description: The granted scopes for this token.
                    example: email profile
        '400':
          description: 'Invalid request (e.g., missing or invalid parameters).'
        '401':
          description: 'Unauthorized (e.g., invalid client credentials).'
      security:
        - basicAuth: []
  /api/v1/channels:
    get:
      summary: Channels listing
      description: Get all channels
      operationId: listChannels
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `name`
              - `note`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by channel name
              value: '[{ "name": { "op": "eq","values": [ "Be U" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'name,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `note`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of channels with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelPaginatedResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    post:
      summary: Create a new channel
      description: Create a new channel with the provided details.
      operationId: createChannel
      tags:
        - Channel
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of the Channel
                  example: Ekyc channel
                note:
                  type: string
                  description: Note about the Channel
                  example: Channel for performing ekyc
      responses:
        '201':
          description: Channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/channels/{channel_id}':
    get:
      summary: Retrieve channel
      description: Get details of a channel.
      operationId: getChannel
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '200':
          description: Channel details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    put:
      summary: Update an existing channel
      description: Update the details of a specific channel.
      operationId: updateChannel
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of the Channel
                  example: Ekyc channel
                note:
                  type: string
                  description: Note about the Channel
                  example: Channel for performing ekyc
      responses:
        '200':
          description: Channel updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete a channel
      description: Delete a specific channel.
      operationId: deleteChannel
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Channel deleted successfully
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/channels/{channel_id}/api-keys':
    get:
      summary: Channel keys listing
      description: Get all keys of the channel
      operationId: listChannelApiKeys
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `api_key`
              - `expires_at`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by expiry
              value: >-
                [{ "expires_at": { "op": "lt","values": [
                "2024-10-23T07:50:34.394Z" ] } }]
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'id,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `api_key`
              - `expires_at`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of channel keys with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelKeyPaginatedResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    post:
      summary: Create a key for channel
      description: Create a key for channel with the provided details.
      operationId: createChannelApiKey
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '201':
          description: Channel key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelKeyDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/channels/{channel_id}/api-keys/{id}':
    delete:
      summary: Delete a key for channel
      description: Delete a key for channel.
      operationId: deleteChannelApiKey
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the key
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '204':
          description: Channel key deleted successfully
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/channels/{channel_id}/apps':
    get:
      summary: List all installed apps for channel
      description: List all installed apps for channel.
      operationId: listInstalledChannelApps
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: A list of installed apps for the channel
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelAppDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    post:
      summary: Install apps for channel
      description: Install apps for channel.
      operationId: installChannelApp
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        description: App details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - app_name
              properties:
                app_name:
                  description: Selected app
                  type: string
                  example: ONFIDO
                app_api_key:
                  type: string
                  description: Api key of the app
                  example: api_sandbox.57u0VjSqlPh.9yyhfdGevnANkRbLxBzufrSlEz6xTO8t
      responses:
        '201':
          description: App installed for channel successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelAppDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/channels/{channel_id}/apps/{id}':
    delete:
      summary: Uninstall apps for channel
      description: Uninstall apps for channel.
      operationId: uninstallChannelApp
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique reference of the app
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Apps uninstalled successfully
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    put:
      summary: Update apps details for channel
      description: Update apps details for channel.
      operationId: updateChannelAppDetails
      tags:
        - Channel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel app
          example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        description: App details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                app_api_key:
                  type: string
                  description: Api key of the app
                  example: api_sandbox.57u0VjSqlPh.9yyhfdGevnANkRbLxBzufrSlEz6xTO8t
                app_properties:
                  description: Custom properties of the app
                  $ref: '#/components/schemas/AppProperty'
                  example:
                    onfido_similarity_score_validation: WORKFLOW
                    onfido_similarity_score_min_threshold: 0.8
                    jumio_similarity_score_validation: PLATFORM
                    jumio_similarity_score_min_approve_threshold: 0.7
                    jumio_similarity_score_min_review_threshold: 0.5
                    jumio_risk_score_validate: true
                    jumio_risk_score_max_approve_threshold: 50
                    jumio_risk_score_max_review_threshold: 70
                    channel_webhook_url: 'https://channel.webhook.url.com'
      responses:
        '200':
          description: Channel app updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelAppDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/channels/{channel_id}/collaborators':
    get:
      summary: Retrieve a list of collaborators under the channel
      description: Retrieve a list of collaborators under the channel.
      operationId: listCollaborators
      tags:
        - Collaborator
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `account.name`
              - `account.email`
              - `access_scope`
              - `api_token`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by collaborators email
              value: >-
                [{ "account.email": { "op": "eq","values": [ "kent@reldyn.co" ]
                } }]
            example2:
              summary: Filter by collaborators name
              value: '[{ "account.name": { "op": "like","values": [ "Kent" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'account.email,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `account.name`
              - `account.email`
              - `access_scope`
              - `api_token`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of collaborators with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorsPaginatedResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    post:
      summary: Invite new collaborator
      description: Invite new collaborator
      operationId: inviteCollaborator
      tags:
        - Collaborator
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        description: Invite new collaborator details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - access_scope
              properties:
                email:
                  type: string
                  description: Email of the collaborator
                  example: kent@reldyn.co
                access_scope:
                  description: Selected access scope of the collaborator
                  type: string
                  enum:
                    - editor
                    - viewer
                  example: viewer
      responses:
        '201':
          description: Collaborator invited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelCollaboratorDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/channels/{channel_id}/collaborators/{collaborator_id}':
    get:
      summary: Get collaborator details
      description: Get collaborator details.
      operationId: getCollaborator
      tags:
        - Collaborator
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: path
          name: collaborator_id
          required: true
          schema:
            type: string
          description: Unique identifier for the collaborator
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '200':
          description: Collaborator details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelCollaboratorDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    put:
      summary: Update collaborator details
      description: Update collaborator details.
      operationId: updateCollaborator
      tags:
        - Collaborator
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: path
          name: collaborator_id
          required: true
          schema:
            type: string
          description: Unique identifier for the collaborator
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Updated collaborator details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - access_scope
              properties:
                access_scope:
                  description: Selected access scope of the collaborator
                  type: string
                  enum:
                    - editor
                    - viewer
                  example: viewer
      responses:
        '200':
          description: Collaborator updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelCollaboratorDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Remove collaborator from channel
      description: remove collaborator from channel.
      operationId: removeCollaborator
      tags:
        - Collaborator
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: path
          name: collaborator_id
          required: true
          schema:
            type: string
          description: Unique identifier for the collaborator
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Collaborator removed successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/accounts:
    get:
      summary: Retrieve a list of accounts
      description: Retrieve a list of accounts.
      operationId: listAccounts
      tags:
        - Account
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`
              - `realm_role.id`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by account email
              value: '[{ "email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by account name
              value: '[{ "name": { "op": "like","values": [ "Kent" ] } }]'
            example3:
              summary: Filter by realm role
              value: >-
                [{ "realm_role.id": { "op": "in","values": [ "admin",
                "channel_user" ] } }]
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'name,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`
              - `realm_role.id`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of accounts with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsPaginatedResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    post:
      summary: Create a new account
      description: Create a new account with the provided details.
      operationId: createAccount
      tags:
        - Account
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: MohammedAli
                email:
                  type: string
                  description: Email of the user
                  example: ali@reldyn.co
                password:
                  type: string
                  description: Password of the user
                  example: 123456
                realm_role:
                  type: string
                  description: Realm role of the user
                  enum:
                    - admin
                    - channel_user
                  example: channel_user
              required:
                - name
                - email
                - password
                - realm_role
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/accounts/{account_id}':
    get:
      summary: Retrieve an account by ID
      description: Get details of a specific account.
      operationId: getAccountById
      tags:
        - Account
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier of the account
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Account details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    put:
      summary: Update an existing account
      description: Update the details of a specific account.
      operationId: updateAccount
      tags:
        - Account
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier of the account to update.
          example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: MohammedAli
                email:
                  type: string
                  description: Email of the user
                  example: ali@reldyn.co
                password:
                  type: string
                  description: Password of the user
                  example: 123456
                realm_role:
                  type: string
                  description: Realm role of the user
                  enum:
                    - admin
                    - channel_user
                  example: channel_user
              required:
                - name
                - email
                - realm_role
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete an account
      description: Delete a specific account.
      operationId: deleteAccount
      tags:
        - Account
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
            description: Unique identifier of the account.
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Account deleted successfully.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/api/v1/accounts/{account_id}/collaborations':
    get:
      summary: Retrieve account's collaborations
      description: Retrieve account's collaborations.
      operationId: listAccountCollaborations
      tags:
        - Account
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
            description: Unique identifier of the account.
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: A list of channels with pagination details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollaborationDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/collaborations:
    get:
      summary: Retrieve a list of channels related to the currently logged-in user
      description: Retrieve a list of channels related to the currently logged-in user.
      operationId: listCollaborations
      tags:
        - Collaboration
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of channels with pagination details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollaborationDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/apps:
    get:
      summary: List all available apps
      description: List all available apps.
      operationId: listApps
      tags:
        - Configuration
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of available apps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/me:
    get:
      summary: Retrieves the authenticated user's information
      operationId: getUser
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/change-password:
    post:
      summary: Change user password
      description: Endpoint for updating the user's password
      operationId: changePassword
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '204':
          description: Password changed successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/logout:
    post:
      summary: Proceed logout from current account
      operationId: logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/requests:
    get:
      summary: Requests listing
      description: Get the verification requests
      operationId: listRequests
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: a3937b4a-13f7-440b-87a4-8771d4a919a2
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `app`
              - `request_status`
              - `customer_reference`
              - `client_id`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by request app
              value: '[{ "app": { "op": "eq","values": [ "ONFIDO" ] } }]'
            example2:
              summary: Filter by request status
              value: >-
                [{ "request_status": { "op": "in","values": [ "ACTIVE",
                "INACTIVE" ] } }]
            example3:
              summary: Filter by app and request status
              value: >-
                [{ "app": { "op": "like","values": [ "ONFIDO" ] } }, { "status":
                { "op": "eq","values": [ "ACTIVE" ] } }]
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'org_name,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `app`
              - `request_status`
              - `customer_reference`
              - `client_id`
              - `created_at`
              - `updated_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of request with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPaginatedResponse'
        '400':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/requests/{request_id}':
    get:
      summary: Retrieve request
      description: Get details of a request.
      operationId: getRequest
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: string
          description: Unique reference of the request
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: a3937b4a-13f7-440b-87a4-8771d4a919a2
      responses:
        '200':
          description: Request details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestDetailDto'
        '400':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/requests/{request_id}/executions/{execution_id}/review':
    post:
      summary: Review request execution
      description: Submit a review decision for a specific execution within a request.
      operationId: reviewRequestExecution
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: a3937b4a-13f7-440b-87a4-8771d4a919a2
        - name: request_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the request.
          example: b8df469c-d78a-4cce-abb5-971c849198f1
        - name: execution_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the request execution.
          example: 5425fa78-d8d3-4184-8d68-c9cb95e56c3f
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - decision
              properties:
                decision:
                  type: string
                  enum:
                    - APPROVED
                    - BLOCKED
                    - DECLINED
                  description: >-
                    Decision for the review, either APPROVED, BLOCKED or
                    DECLINED.
                reason:
                  type: string
                  description: Reason for the decision.
                note:
                  type: string
                  description: Additional notes.
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: List of attachment files.
                reset_attempts:
                  type: boolean
                  description: Flag to reset the attempt counts
      responses:
        '200':
          description: Review submitted successfully.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/requests/{request_id}/events':
    post:
      summary: save events and attachments for requests.
      operationId: saveRequestEvents
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: string
          description: Unique reference of the request
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: a3937b4a-13f7-440b-87a4-8771d4a919a2
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - notes
              properties:
                notes:
                  type: string
                  description: Notes or additional information about the event.
                attachment:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: List of optional file attachments related to the event.
      responses:
        '201':
          description: Request event created successfully.
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    get:
      summary: Request events listing
      description: Get the list of events associated with a request
      operationId: listRequestEvents
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: string
          description: Unique reference of the request
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: a3937b4a-13f7-440b-87a4-8771d4a919a2
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `request_type`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by request type
              value: '[{ "request_type": { "op": "eq","values": [ "ADD_COMMENT" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'org_name,desc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `request_type`
              - `created_at`
              - `updated_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of request with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestEventPaginatedResponse'
        '400':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  /api/v1/reasons:
    get:
      summary: Retrieve a list of reasons
      description: Get a list of all reasons.
      operationId: listReasons
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```json

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `name`
              - `description`
              - `app`
              - `organization_id`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by reason name
              value: '[{ "name": { "op": "like", "values": [ "Sample Reason" ] } }]'
            example2:
              summary: Filter by application name
              value: '[{ "app": { "op": "eq", "values": [ "ONFIDO" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'name,asc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `description`
              - `app`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of reasons with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonPaginatedResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    post:
      summary: Create a new reason
      description: Create a new reason with the provided details.
      operationId: createReason
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the reason
                  example: mule
                description:
                  type: string
                  description: A detailed description of the reason
                  example: This is used for sample purposes.
                app:
                  type: string
                  description: The application associated with the reason
                  example: ONFIDO
              required:
                - name
                - app
      responses:
        '201':
          description: Reason created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/reasons/{id}':
    get:
      summary: Retrieve a reason by ID
      description: Get details of a specific reason.
      operationId: getReason
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the reason
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      responses:
        '200':
          description: Reason details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    put:
      summary: Update an existing reason
      description: Update the details of a specific reason.
      operationId: updateReason
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the reason
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the reason
                  example: mule
                description:
                  type: string
                  description: A detailed description of the reason
                  example: This is used for sample purposes.
                app:
                  type: string
                  description: The application associated with the reason
                  example: ONFIDO
      responses:
        '200':
          description: Reason updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    delete:
      summary: Delete a reason
      description: Delete a specific reason.
      operationId: deleteReason
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the reason
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      responses:
        '200':
          description: Reason deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/requests/{request_id}/executions/{execution_id}/files':
    get:
      summary: List all files of the request execution
      description: List all files of the request execution.
      operationId: listRequestFiles
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: string
          description: Unique reference of the request
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: execution_id
          required: true
          schema:
            type: string
          description: Unique reference of the request execution
          example: 55d2c47f-ab3c-4e74-a0e4-165d0495b5b2
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: a3937b4a-13f7-440b-87a4-8771d4a919a2
      responses:
        '200':
          description: List of files retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestFileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/requests/{request_id}/files/{file_id}/download':
    get:
      summary: Download request file
      description: Download request file.
      operationId: downloadRequestFile
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: string
          description: Unique reference of the request
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: file_id
          required: true
          schema:
            type: string
          description: Unique reference of the file
          example: dd43ee6b-d90e-41b8-bb9b-385529d591fd
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: a3937b4a-13f7-440b-87a4-8771d4a919a2
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  /api/v1/purposes:
    get:
      summary: Retrieve a list of purposes
      description: Get a list of all purposes.
      operationId: listPurposes
      tags:
        - Purpose
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `id`
              - `name`
              - `description`
              - `workflow_id`
              - `attempt_counts`
              - `channel_id`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by purpose name
              value: >-
                [{ "name": { "op": "like", "values": [ "QSA_NEW_APPLICATION" ] }
                }]
            example2:
              summary: Filter by workflow ID
              value: '[{ "workflow_id": { "op": "eq", "values": [ "12345" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'name,asc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `description`
              - `workflow_id`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of purposes with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurposePaginatedResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    post:
      summary: Create a new purpose
      description: Create a new purpose with the provided details.
      operationId: createPurpose
      tags:
        - Purpose
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the purpose
                  example: QSA_NEW_APPLICATION
                app:
                  type: string
                  description: The application associated with the purpose
                  example: ONFIDO
                description:
                  type: string
                  description: A detailed description of the purpose
                  example: Verify user identity during onboarding
                workflow_id:
                  type: string
                  description: ID of the workflow associated with this purpose
                  example: workflow_12345
                attempt_counts:
                  type: integer
                  description: Number of attempts made for this purpose
                  example: 3
              required:
                - name
                - app
      responses:
        '201':
          description: Purpose created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurposeDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/purposes/{id}':
    get:
      summary: Retrieve a purpose by ID
      description: Get details of a specific purpose.
      operationId: getPurpose
      tags:
        - Purpose
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the purpose
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      responses:
        '200':
          description: Purpose details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurposeDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    put:
      summary: Update an existing purpose
      description: Update the details of a specific purpose.
      operationId: updatePurpose
      tags:
        - Purpose
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the purpose
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the purpose
                  example: QSA_NEW_APPLICATION
                app:
                  type: string
                  description: The application associated with the purpose
                  example: ONFIDO
                description:
                  type: string
                  description: A detailed description of the purpose
                  example: Verify user identity during onboarding
                workflow_id:
                  type: string
                  description: ID of the workflow associated with this purpose
                  example: workflow_12345
                attempt_counts:
                  type: integer
                  description: Number of attempts made for this purpose
                  example: 3
      responses:
        '200':
          description: Purpose updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurposeDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    delete:
      summary: Delete a purpose
      description: Delete a specific purpose.
      operationId: deletePurpose
      tags:
        - Purpose
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the purpose
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      responses:
        '200':
          description: Purpose deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/requests/{request_id}/executions/{execution_id}/profiles':
    put:
      summary: Update profile for request execution
      description: >
        Updates the profile details of an applicant associated with a specific
        request execution. This can include changes to name, address, or other
        profile-related fields. The execution record is determined by
        `requestId`, `executionId`, and `channelId`.
      operationId: updateProfile
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: string
          description: Unique identifier of the verification request
          example: 3993afe2-e4f1-4087-ab34-27edcac98ab0
        - in: path
          name: execution_id
          required: true
          schema:
            type: string
          description: Unique identifier of the request execution
          example: a1b2c3d4-e5f6-7890-ghij-klmnopqrstuv
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: portal-web
      requestBody:
        description: Payload containing updated profile details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileDto'
      responses:
        '200':
          description: Profile updated successfully (No Content)
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  /api/v1/id-types:
    get:
      summary: Retrieve list of id-types
      description: Get list of a available id-types.
      operationId: listIdTypes
      tags:
        - Configuration
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: a3937b4a-13f7-440b-87a4-8771d4a919a2
      responses:
        '200':
          description: Id types retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdTypeDto'
        '400':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  /api/v1/postcodes:
    get:
      summary: Retrieve a list of postcodes
      description: Get a list of all postcodes.
      operationId: listPostcodes
      tags:
        - Configuration
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: false
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Format is:

            ```

            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]

            ```


            **Where:**

            - **filterFieldName**: The field to filter by. Possible values
            include:
              - `postcode`
              - `state_code`
              - `state_name`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by postcode
              value: '[{ "postcode": { "op": "like", "values": [ "55100" ] } }]'
            example2:
              summary: Filter by state name
              value: '[{ "state_name": { "op": "eq", "values": [ "Kuala Lumpur" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'name,asc'
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `postcode`
              - `state_name`
              - `state_code`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of postcodes with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostcodePaginatedResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    post:
      summary: Create a new postcode
      description: Create a new postcode with the provided details.
      operationId: createPostcode
      tags:
        - Configuration
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: false
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postcode:
                  type: string
                  description: The postcode value
                  example: 55100
                state_code:
                  type: string
                  description: The state code
                  example: KUL
                state_name:
                  type: string
                  description: The state name
                  example: Kuala Lumpur
              required:
                - postcode
                - state_code
                - state_name
      responses:
        '201':
          description: Postcode created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostcodeDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
  '/api/v1/postcodes/{id}':
    put:
      summary: Update an existing postcode
      description: Update the details of a specific postcode.
      operationId: updatePostcode
      tags:
        - Configuration
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the postcode
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: false
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                postcode:
                  type: string
                  description: the postcode
                  example: 55100
                state_code:
                  type: string
                  description: The unique code for state
                  example: KUL
                state_name:
                  type: string
                  description: The state name
                  example: Kuala Lumpur
      responses:
        '200':
          description: Postcode updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostcodeDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
    delete:
      summary: Delete a postcode
      description: Delete a specific postcode.
      operationId: deletePostcode
      tags:
        - Configuration
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the postcode
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: false
          schema:
            type: string
          description: The channel ID
          example: b8df469c-d78a-4cce-abb5-971c849198f1
      responses:
        '200':
          description: Postcode deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto1'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AccountDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this user
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this user
          example: Foo
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        last_login_time:
          type: string
          format: date-time
          description: Last login time of the user
          example: '2021-02-01T12:34:56Z'
        realm_role:
          type: string
          description: Realm role of the user
          enum:
            - admin
            - channel_user
          example: channel_user
    AppDto:
      type: object
      properties:
        app_name:
          type: string
          description: Name of the app
          example: ONFIDO
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this app
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this app
          example: Foo
        description:
          type: string
          description: Description of the app
          example: Onfido application for performing ekyc
        logo:
          type: string
          description: Logo url of the app
          example: 'https://s3.ap-south-1.amazonaws.com/logo.jpg'
        label:
          type: string
          description: Label of the app
          example: Jumio
        menu_links:
          type: object
          description: Menu links of the app
          example:
            subheader: Jumio
            roles:
              - channel_user
            items:
              - title: Request
                path: /jumio/request
                icon: ic-parameter
                roles:
                  - channel_user
              - title: Reason
                path: /jumio/reason
                icon: ic-parameter
                roles:
                  - channel_user
    ChannelDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the channel
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this app
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this app
          example: Foo
        name:
          type: string
          description: Name of the channel
          example: Ekyc channel
        note:
          type: string
          description: Note about the channel
          example: Channel for performing ekyc
        apps:
          type: array
          description: List of apps associated with the channel
          items:
            $ref: '#/components/schemas/ChannelAppDto'
    ChannelAppDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the channel app
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this app
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this app
          example: Foo
        app_name:
          type: string
          description: Name of the app
          example: ONFIDO
        app_api_key:
          type: string
          description: Api Key of the app
          example: api_sandbox.57u0VjSqlPh.9yyhfdGevnANkRbLxBzufrSlEz6xTO8t
        app_properties:
          description: Custom properties of the app
          $ref: '#/components/schemas/AppProperty'
          example:
            onfido_similarity_score_validation: WORKFLOW
            onfido_similarity_score_min_threshold: 0.8
            jumio_similarity_score_validation: PLATFORM
            jumio_similarity_score_min_approve_threshold: 0.7
            jumio_similarity_score_min_review_threshold: 0.5
            jumio_risk_score_validate: true
            jumio_risk_score_max_approve_threshold: 50
            jumio_risk_score_max_review_threshold: 70
            channel_webhook_url: 'https://channel.webhook.url.com'
        app_label:
          type: string
          description: Label of the app
          example: Onfido
    ChannelCollaboratorDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the collaborator
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this collaborator
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this collaborator
          example: Foo
        name:
          type: string
          description: Name of the collaborator
          example: Kent
        email:
          type: string
          description: Email of the collaborator
          example: kent@reldyn.co
        account_id:
          type: string
          description: Account id of the collaborator
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        access_scope:
          type: string
          description: Access rights granted to the collaborator within the channel
          enum:
            - editor
            - viewer
          example: viewer
    ChannelKeyDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the key
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Email of the user that created this key
          example: kent@reldyn.co
        api_key:
          type: string
          description: Key generated for channel
          example: >-
            eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1NmYwOGEyOS1lNmMxLTQzMzYtOWZmYy05MjgzZjYwYWUyZDIifQ.YxO2390uoSX566s6z2PZnNy10VPe5gAaWKEgaxFypZ4
        expires_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
    CollaborationDto:
      type: object
      properties:
        channel_id:
          type: string
          description: Unique identifier for the channel
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        channel_name:
          type: string
          description: Name of the channel
          example: Be U
        access_scope:
          type: string
          description: Access rights granted to the collaborator within the channel
          enum:
            - editor
            - viewer
          example: viewer
        apps:
          type: array
          items:
            $ref: '#/components/schemas/AppDto'
    GlobalErrorResponseDto:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error occurred
          example: '2024-10-07T16:51:24.595+08:00'
        status:
          type: integer
          description: Error code indicating the issue
        message:
          type: string
          description: Error message that describes the issue
        path:
          type: string
          description: The endpoint path where the error occurred
          example: /api/v1/channels
    AccountsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccountDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    ChannelPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ChannelDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    CollaboratorsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ChannelCollaboratorDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    ChannelKeyPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ChannelKeyDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    UserDetail:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        realm_role:
          type: string
          description: Realm role of the user
          enum:
            - admin
            - channel_user
          example: channel_user
    ChangePasswordRequest:
      type: object
      properties:
        password:
          type: string
          description: The new password for the user
          example: new_password123
        confirm_password:
          type: string
          description: Confirmation of the new password
          example: new_password123
      required:
        - password
        - confirm_password
    AppProperty:
      type: object
      description: Custom properties of the app
      properties:
        onfido_similarity_score_validation:
          type: string
          enum:
            - PLATFORM
            - WORKFLOW
            - NONE
          description: >
            The validation mode for similarity score in Onfido for determining
            validated scores upon receiving a callback.
        onfido_similarity_score_min_threshold:
          type: number
          description: >
            The minimum similarity score required for a successful verification
            in Onfido.
        jumio_similarity_score_validation:
          type: string
          enum:
            - PLATFORM
            - WORKFLOW
            - NONE
          description: |
            The validation mode for similarity score in Jumio.
        jumio_similarity_score_min_approve_threshold:
          type: number
          description: >
            The minimum approval threshold for similarity score in Jumio. A
            score below this threshold will lead to rejection.
        jumio_similarity_score_min_review_threshold:
          type: number
          description: >
            The minimum review threshold for similarity score in Jumio. A score
            above this threshold but below the approval threshold will lead to a
            review status.
        jumio_risk_score_validate:
          type: boolean
          description: |
            Indicates risk scoring validation is enabled for Jumio.
        jumio_risk_score_max_approve_threshold:
          type: number
          description: >
            The maximum approval threshold for risk scores in Jumio. A score
            exceeding this threshold will lead to rejection.
        jumio_risk_score_max_review_threshold:
          type: number
          description: >
            The maximum review threshold for risk scores in Jumio. A score above
            this threshold but below the approval threshold will lead to a
            review status.
        channel_webhook_url:
          type: string
          format: uri
          description: |
            The URL for receiving webhook notifications from Channel.
    RequestDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the request
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        app:
          type: string
          description: Request app
          example: ONFIDO
        request_status:
          type: string
          description: Status of the request
          enum:
            - AWAITING_INPUT
            - PROCESSING
            - REVIEW
            - APPROVED
            - DECLINED
            - ERROR
            - EXPIRED
            - BLOCKED
            - FLAGGED_FOR_REVIEW
          example: APPROVED
        customer_reference:
          type: string
          description: Unique identifier from channel request
          example: 6722406b-e823-40a0-b691-ea187a1e364d
        metadata:
          type: object
          description: Dynamic request information sent based on app
        channel_id:
          type: string
          description: Request belong to which channel
          example: 6722406b-e823-40a0-b691-ea187a1e364d
        channel_name:
          type: string
          example: name for the client
        purpose:
          type: string
          description: Purpose of the request
          example: QSA_NEW_APPLICATION
        attempt_used:
          type: integer
          description: Number of attempts used for respective request.
          example: 1
        attempt_left:
          type: integer
          description: Number of attempts left for respective request.
          example: 2
    RequestDetailDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the request
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        app:
          type: string
          description: Request app
          example: ONFIDO
        request_status:
          type: string
          description: Status of the request
          enum:
            - AWAITING_INPUT
            - PROCESSING
            - REVIEW
            - APPROVED
            - DECLINED
            - ERROR
            - EXPIRED
            - BLOCKED
            - FLAGGED_FOR_REVIEW
          example: APPROVED
        customer_reference:
          type: string
          description: Unique identifier from channel request
          example: 6722406b-e823-40a0-b691-ea187a1e364d
        metadata:
          type: object
          description: Dynamic request information sent based on app
        channel_id:
          type: string
          description: Request belong to which channel
          example: 6722406b-e823-40a0-b691-ea187a1e364d
        workflow_id:
          type: string
          description: Request Workflow Id
        request_executions:
          type: array
          description: Request execution details
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique identifier for the request execution
                example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
              created_at:
                type: string
                format: date-time
                example: '2021-02-01T12:34:56Z'
              updated_at:
                type: string
                format: date-time
                example: '2021-02-01T12:34:56Z'
              execution_status:
                type: string
                description: 'Status for the request execution (PROCESSINS, SUCCESS, ERROR)'
                example: PROCESSING
              summary:
                type: object
                description: Dynamic basic result details of the response
              profile:
                $ref: '#/components/schemas/ProfileDto'
              original_profile:
                $ref: '#/components/schemas/ProfileDto'
              summary_result:
                type: object
                description: Summary of validation checks
                properties:
                  id_document:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                          description: Validation check label
                          example: Usability
                        status:
                          type: string
                          description: Validation check status
                          example: PASSED
                        value:
                          type: string
                          description: Additional details about the check
                          example: REPEATED_FACE
                  selfie_Credential:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                          description: Validation check label
                          example: Usability
                        status:
                          type: string
                          description: Validation check status
                          example: PASSED
                  facemap:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                          description: Validation check label
                          example: Usability
                        status:
                          type: string
                          description: Validation check status
                          example: PASSED
                  others:
                    type: object
                    properties:
                      risk_score:
                        type: integer
                        description: Risk score associated with the check
                        example: 50
                      similarity_score:
                        type: number
                        format: double
                        description: Similarity score
                        example: 0.8
                      predicted_age:
                        type: integer
                        description: Predicted age
                        example: 30
                      age_confidence_range:
                        type: string
                        description: Confidence range for the predicted age
                        example: 17-43
              result:
                type: object
                description: Dynamic full result details of the response
              full_details_ready:
                type: boolean
                description: Indication of the readiness of result
              credentials:
                type: object
                description: Dynamic credential of the response
              app:
                type: string
                description: Request app
                example: ONFIDO
              channel_id:
                type: string
                description: Request belong to which channel
                example: 6722406b-e823-40a0-b691-ea187a1e364d
              reference_id:
                type: string
                description: Request belong to which workflow
                example: 6722406b-e823-40a0-b691-ea187a1e364d
              request_execution_reasons:
                type: array
                description: Reason on failed request
                items:
                  type: object
                  properties:
                    reason:
                      type: string
                      description: Reason text on request rejected
                    manual_review:
                      type: boolean
                      description: Indication request is manual/auto rejected
        channel_name:
          type: string
          example: name for the client
        purpose:
          type: string
          description: Purpose of the request
          example: QSA_NEW_APPLICATION
        attempt_used:
          type: integer
          description: Number of attempts used for respective request.
          example: 1
        attempt_left:
          type: integer
          description: Number of attempts left for respective request.
          example: 2
    RequestPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/RequestDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    GlobalErrorResponseDto1:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error occurred
          example: '2024-10-07T16:51:24.595+08:00'
        status:
          type: integer
          description: Error code indicating the issue
        message:
          type: string
          description: Error message that describes the issue
        path:
          type: string
          description: The endpoint path where the error occurred
          example: /v1/requests
    RequestEventPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/RequestEventDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    RequestEventDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the created request event.
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this event
          example: Foo
        updated_by:
          type: string
          description: Name of the user that last updated this event
          example: Foo
        request_id:
          type: string
          description: The ID of the associated request.
        request_type:
          type: string
          description: Type/category of the request event.
          enum:
            - ADD_COMMENT
            - REVIEW_REQUEST
            - EDIT_REQUEST
            - CHANNEL_REVIEW_REQUEST
          example: ADD_COMMENT
        notes:
          type: string
          description: Notes about the request event.
        description:
          type: string
          description: Detailed description of the request event.
        has_attachment:
          type: boolean
          description: Indicates if an attachment is included.
        metadata:
          type: object
          description: Additional metadata stored as JSON.
        request_file:
          type: array
          items:
            $ref: '#/components/schemas/RequestFileDto'
    ReasonPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ReasonDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    ReasonDto:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the reason
          example: c2d35161-b8a9-47c8-88d2-7f6fcd29c561
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        name:
          type: string
          description: The name of the reason
          example: mule
        description:
          type: string
          description: A detailed description of the reason
          example: Scam report on this account
        channel_id:
          type: string
          description: Id of the organization
          example: e2d76212-b8a9-63c8-69d2-7f6fcd42c532
        app:
          type: string
          description: Application of the organization
          example: ONFIDO
    RequestFileDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the file
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        request_id:
          type: string
          description: Unique identifier for the request
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        request_execution_id:
          type: string
          description: Unique identifier for the request execution
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        request_event_id:
          type: string
          description: Unique identifier for the request event
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        category:
          type: string
          description: Category of the file
          example: ID
        sub_category:
          type: string
          description: Subcategory of the file
          example: FRONT
        original_url:
          type: string
          description: The original URL where the file can be accessed
          example: 'http://example.com/original-file'
        file_name:
          type: string
          description: The name of the file
          example: file1.png
        file_type:
          type: string
          description: 'The type of the file (e.g., png, jpg)'
          example: png
        file_size:
          type: string
          description: The size of the file in bytes
          example: 1024
        file_path:
          type: string
          description: The path to the file
          example: /jumio/ID/FRONT/file1.png
    PurposePaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PurposeDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    PurposeDto:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the purpose
          example: c2d35161-b8a9-47c8-88d2-7f6fcd29c561
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this event
          example: Foo
        updated_by:
          type: string
          description: Name of the user that last updated this event
          example: Foo
        name:
          type: string
          description: The name of the purpose
          example: QSA_NEW_APPLICATION
        app:
          type: string
          description: The application associated with the purpose
          example: ONFIDO
        description:
          type: string
          description: A detailed description of the purpose
          example: Verify user identity during onboarding
        workflow_id:
          type: string
          description: ID of the workflow associated with this purpose
          example: workflow_12345
        attempt_counts:
          type: integer
          description: Number of attempts made for this purpose
          example: 3
        channel_id:
          type: string
          description: ID of the channel associated with this purpose
          example: e2d76212-b8a9-63c8-69d2-7f6fcd42c532
    ProfileDto:
      type: object
      description: Dynamic profile result details of the response
      properties:
        type:
          type: string
          description: Ekyc card type
          enum:
            - NATIONAL_ID
            - RESIDENCE_PERMIT
            - MILITARY_ID
            - PASSPORT
            - DRIVING_LICENSE
            - UNSUPPORTED
            - OTHERS
          example: NATIONAL_ID
        id_number:
          type: string
          description: Document id number
          example: 660320101988
        issuing_country:
          type: string
          description: Document issuing country
          example: MYS
        full_name:
          type: string
          description: Document full name
          example: Alexandra Avando
        first_name:
          type: string
          description: Document first name
          example: Avando
        middle_name:
          type: string
          description: Document middle name
          example: Alexandra
        last_name:
          type: string
          description: Document last name
          example: Alexandra
        full_address:
          type: string
          description: Document full address
          example: '88, jalan gembira, taman bahagia, 88888, selangor.'
        address_line_1:
          type: string
          description: Document address line 1
          example: '88, jalan gembira'
        address_line_2:
          type: string
          description: Document address line 2
          example: taman bahagia
        address_line_3:
          type: string
          description: Document address line 3
          example: '88888, selangor'
        address_line_4:
          type: string
          description: Document address line 4
          example: 't88888, selangor'
        address_line_5:
          type: string
          description: Document address line 5
          example: '88888, selangor'
        postcode:
          type: string
          description: Document address postal code
          example: 88888
        city:
          type: string
          description: Document address city
          example: Klang
        state:
          type: string
          description: Document address state
          example: selangor
        country:
          type: string
          description: Document address country
          example: MYS
        gender:
          type: string
          description: Document gender
          example: M
        nationality:
          type: string
          description: Document nationality
          example: MY
        date_of_birth:
          type: string
          description: Document date of birth
          example: yyyy-MM-dd
        state_code:
          type: string
          description: Document address state code
          example: SEL
    IdTypeDto:
      type: array
      items:
        type: object
        properties:
          code:
            type: string
            description: The unique identifier for the ID type
            example: NATIONAL_ID
          label:
            type: string
            description: Label for the ID type
            example: National ID
    PostcodePaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PostcodeDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    PostcodeDto:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the postcode
          example: c2d35161-b8a9-47c8-88d2-7f6fcd29c561
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this event
          example: Foo
        updated_by:
          type: string
          description: Name of the user that last updated this event
          example: Foo
        postcode:
          type: string
          description: The postcode
          example: 55100
        state_code:
          type: string
          description: The unique code for state
          example: KUL
        state_name:
          type: string
          description: The state name
          example: Kuala Lumpur
x-tagGroups:
  - name: Authentication
    tags:
      - Authentication
  - name: Admin
    tags:
      - Channel
      - Account
      - Collaborator
  - name: Channel User
    tags:
      - Collaboration
      - Profile
      - Request
      - Reason
      - Purpose
  - name: Common
    tags:
      - Configuration
