openapi: 3.0.3
info:
  version: 1.0.0
  title: RDI Portal API
  contact:
    name: Contact our support
    email: hello@reldyn.co
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: >
    Included below are the API Endpoints available within the Reldyn Identity
    (RDI) Portal API. <br><br> There are many OpenAPI Tools available for you to
    work directly with the OpenAPI Specification, if desired. For instance, you
    may leverage code generation tools to generate client libraries in any one
    of the support languages and frameworks.
  x-logo:
    url: 'https://reldyn.co/assets/images/logo.svg'
    backgroundColor: '#ee0979'
    altText: Reldyn
servers:
  - url: 'https://bbr2xbhs2f.execute-api.ap-south-1.amazonaws.com/api'
    description: Development server
tags:
  - name: Authentication
    description: API for obtaining OAuth 2.0 tokens using password grant.
  - name: Organizations
    description: The API allows you to view and manage the organizations.
paths:
  /auth/realms/rdi-portal/protocol/openid-connect/token:
    post:
      summary: Generate an access token
      description: |
        This endpoint issues an OAuth 2.0 token using the password grant type.
      operationId: generateAccessToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: The OAuth 2.0 grant type (should be "password").
                  example: password
                username:
                  type: string
                  description: The user's username.
                  example: johndoe
                password:
                  type: string
                  description: The user's password.
                  example: secret_password
              required:
                - grant_type
                - username
                - password
      responses:
        '200':
          description: Successful response with OAuth 2.0 tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The OAuth 2.0 access token.
                    example: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIxOW...
                  expires_in:
                    type: integer
                    description: The number of seconds until the access token expires.
                    example: 299
                  refresh_expires_in:
                    type: integer
                    description: The number of seconds until the refresh token expires.
                    example: 1799
                  refresh_token:
                    type: string
                    description: The OAuth 2.0 refresh token.
                    example: eyJhbGciOiJIUzUxMiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIx...
                  token_type:
                    type: string
                    description: 'The type of token (e.g., "Bearer").'
                    example: Bearer
                  not-before-policy:
                    type: integer
                    example: 0
                  session_state:
                    type: string
                    description: Session state identifier.
                    example: bac70a91-02cb-4e24-877a-85e90cd7ecef
                  scope:
                    type: string
                    description: The granted scopes for this token.
                    example: email profile
        '400':
          description: 'Invalid request (e.g., missing or invalid parameters).'
        '401':
          description: 'Unauthorized (e.g., invalid client credentials).'
      security:
        - basicAuth: []
  /auth/realms/rdi-portal/protocol/openid-connect/userinfo:
    get:
      summary: Retrieve user info
      description: >
        This endpoint retrieves user information such as subject ID, email
        verification status, and preferred username using a Bearer token.
      operationId: retrieveUserInfo
      tags:
        - Authentication
      responses:
        '200':
          description: Successful response with user info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: The unique identifier for the user (subject).
                    example: 922301cb-aec5-4cfd-bb08-94adef4f51ed
                  email_verified:
                    type: boolean
                    description: Indicates if the user's email is verified.
                    example: false
                  realm_access:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          type: string
                          enum:
                            - admin
                            - org_user
                            - viewer
                            - editor
                            - owner
                        description: Roles assigned to the user within the realm.
                        example:
                          - admin
                  preferred_username:
                    type: string
                    description: The user's preferred username.
                    example: admin@reldyn.co
        '401':
          description: 'Unauthorized access (e.g., missing or invalid Bearer token).'
      security:
        - bearerAuth: []
  /v1/organizations:
    post:
      summary: Create a new organization
      description: Creates a new organization.
      operationId: createOrganization
      tags:
        - Organizations
      requestBody:
        description: Organization creation details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - org_name
                - org_registration_no
              properties:
                org_name:
                  type: string
                  description: Name of the organization
                  example: Bank Islam
                org_registration_no:
                  type: string
                  description: Registration no of the organization
                  example: 1234567890
                org_contact_no:
                  type: string
                  description: Contact phone number for the organization
                  example: '+601234567890'
                org_contact_name:
                  type: string
                  description: Contact name for the organization
                  example: Darren
                org_email:
                  type: string
                  format: email
                  description: Contact email for the organization
                  example: beu@beu.com
                note:
                  type: string
                  description: Note for the organization
                  example: >-
                    This organization focuses on providing technology solutions
                    for various industries.
                apps:
                  description: Selected app
                  type: array
                  uniqueItems: true
                  items:
                    type: string
                    example: ONFIDO
                    enum:
                      - ONFIDO
                      - JUMIO
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    get:
      summary: Retrieve a list of organizations
      description: Retrieves a list of all organizations.
      operationId: listOrganizations
      tags:
        - Organizations
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Custom filtering parameters
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'org_name,desc'
          description: 'Sort by properties, e.g. `status,desc` or `id,asc`'
      responses:
        '200':
          description: A list of organizations with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsPaginatedResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/v1/organizations/{organization_id}':
    get:
      summary: Retrieve a single organization
      description: Retrieves details of a single organization by its ID.
      operationId: getOrganization
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '200':
          description: Organization details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    put:
      summary: Update an organization
      description: Updates details of an existing organization.
      operationId: updateOrganization
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Updated organization details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                org_name:
                  type: string
                  description: Name of the organization
                  example: Bank Islam
                org_registration_no:
                  type: string
                  description: Registration no of the organization
                  example: 1234567890
                org_status:
                  type: string
                  description: 'Status of the organization (e.g., active, inactive)'
                  enum:
                    - ACTIVE
                    - INACTIVE
                  example: ACTIVE
                org_contact_no:
                  type: string
                  description: Contact phone number for the organization
                  example: '+601234567890'
                org_contact_name:
                  type: string
                  description: Contact name for the organization
                  example: Darren
                org_email:
                  type: string
                  format: email
                  description: Contact email for the organization
                  example: beu@beu.com
                note:
                  type: string
                  description: Note for the organization
                  example: >-
                    This organization focuses on providing technology solutions
                    for various industries.
                org_logo_url:
                  type: string
                  description: Logo url for the organization
                  example: 'https://s3.ap-south-1.amazonaws.com/logo.jpg'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete an organization
      description: Deletes an existing organization by id.
      operationId: deleteOrganization
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Organization deleted successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/v1/organizations/{organization_id}/apps':
    post:
      summary: Install the apps
      description: Install the apps.
      operationId: installApps
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: App details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apps
              properties:
                apps:
                  description: Selected app
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: string
                    example: ONFIDO
                    enum:
                      - ONFIDO
                      - JUMIO
      responses:
        '201':
          description: App installed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrgAppDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/v1/organizations/{organization_id}/apps/{app_id}':
    put:
      summary: Update apps details
      description: Updates apps details
      operationId: updateApps
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Unique identifier for the apps
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Updated apps details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                app_properties:
                  description: Custom properties of the app
                  type: object
                  example:
                    onfido.similarity_score_threshold: 0.8
                    onfido.similarity_checking_flag: false
                app_api_key:
                  type: string
                  description: Api Key of the app
                  example: api_sandbox.57u0VjSqHpL.8yyhfdGevnAEkRbLkBzufrSlEz6xTO8j
      responses:
        '200':
          description: Apps details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgAppDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Uninstalls apps
      description: Uninstalls apps.
      operationId: uninstallApps
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Unique identifier for the apps
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Apps uninstalled successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/v1/organizations/{organization_id}/images':
    post:
      summary: Upload organization's logo
      description: Upload organization's logo
      operationId: uploadOrganizationLogo
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The image file to upload
      responses:
        '201':
          description: Organization's logo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete organization's logo
      description: Delete organization's logo
      operationId: deleteOrganizationLogo
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Organization's logo deleted successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/v1/organizations/{organization_id}/accounts':
    get:
      summary: Retrieve a list of accounts under the organization
      description: Retrieve a list of accounts under the organization.
      operationId: listAccounts
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: query
          name: q
          schema:
            type: string
          description: Custom filtering parameters
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: 'org_name,desc'
          description: 'Sort by properties, e.g. `status,desc` or `id,asc`'
      responses:
        '200':
          description: A list of accounts with pagination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsPaginatedResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    post:
      summary: Create a new account
      description: Creates a new account.
      operationId: createAccount
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Account creation details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: Kent
                email:
                  type: string
                  description: Email of the user
                  example: kent@reldyn.co
                password:
                  type: string
                  description: Password of the user
                  example: Kent123456
                phone_no:
                  type: string
                  description: Phone no of the user
                  example: 601234567890
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  '/v1/organizations/{organization_id}/accounts/{account_id}':
    put:
      summary: Update account details
      description: Update account details.
      operationId: updateAccount
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier for the account
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Updated Account details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: Kent
                email:
                  type: string
                  description: Email of the user
                  example: kent@reldyn.co
                phone_no:
                  type: string
                  description: Phone no of the user
                  example: 601234567890
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete account from organization
      description: Delete account from organization.
      operationId: deleteAccount
      tags:
        - Organizations
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier for the account
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Account deleted successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    OrganizationDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the organization
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this organization
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this organization
          example: Foo
        org_name:
          type: string
          description: Name of the organization
          example: Bank Islam
        org_registration_no:
          type: string
          description: Registration no of the organization
          example: 1234567890
        org_status:
          type: string
          description: 'Status of the organization (e.g., active, inactive)'
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        org_primary_account_id:
          type: string
          description: >-
            Foreign key referencing the primary account associated with the
            organization
          example: 6722406b-e823-40a0-b691-ea187a1e364d
        org_contact_no:
          type: string
          description: Contact phone number for the organization
          example: '+601234567890'
        org_contact_name:
          type: string
          description: Contact name for the organization
          example: Darren
        org_email:
          type: string
          format: email
          description: Contact email for the organization
          example: beu@beu.com
        note:
          type: string
          description: Note for the organization
          example: >-
            This organization focuses on providing technology solutions for
            various industries.
        org_logo_url:
          type: string
          description: Logo url for the organization
          example: 'https://s3.ap-south-1.amazonaws.com/logo.jpg'
        apps:
          type: array
          items:
            $ref: '#/components/schemas/OrgAppDto'
        clients:
          type: array
          items:
            $ref: '#/components/schemas/OrgClientDto'
    OrgAppDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the app
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this app
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this app
          example: Foo
        app_name:
          type: string
          description: Name of the app
          example: ONFIDO
        app_properties:
          description: Custom properties of the app
          type: object
          example:
            onfido.similarity_score_threshold: 0.8
            onfido.similarity_checking_flag: false
        app_api_key:
          type: string
          description: Api Key of the app
          example: api_sandbox.57u0VjSqHpL.8yyhfdGevnAEkRbLkBzufrSlEz6xTO8j
    OrgClientDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the client
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this client
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this client
          example: Foo
        name:
          type: string
          description: Name of the client
          example: Be U
        note:
          type: string
          description: Note for the organization
          example: Be U client
    AccountDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this user
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this user
          example: Foo
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        phone_no:
          type: string
          description: Phone no of the user
          example: 601234567890
        last_login_time:
          type: string
          format: date-time
          description: Last login time of the user
          example: '2021-02-01T12:34:56Z'
        user_type:
          type: string
          description: Type of the user
          enum:
            - PLATFORM
            - ORG_USER
          example: ORG_USER
    OrgUserDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the org user
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        created_by:
          type: string
          description: Name of the user that created this org user
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T12:34:56Z'
        updated_by:
          type: string
          description: Name of the user that last updated this org user
          example: Foo
    GlobalErrorResponseDto:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error occurred
          example: '2024-10-07T16:51:24.595+08:00'
        status:
          type: integer
          description: Error code indicating the issue
        message:
          type: string
          description: Error message that describes the issue
        path:
          type: string
          description: The endpoint path where the error occurred
          example: /api/v1/organizations
    OrganizationsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    AccountsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccountDto'
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
