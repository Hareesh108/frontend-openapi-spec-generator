openapi: 3.0.3
info:
  title: Verification Service Portal API
  description: |
    The API is based on REST principles. It uses standard HTTP response codes and verbs, and token-based authentication.
    All requests must be made over HTTPS with TLS 1.2+ and Server Name Indication enabled. HTTP requests over HTTP will fail.

    ## Base URL
    ```
    https://TENANT_NAME.reldynidentity.com/api
    ```
    Replace `TENANT_NAME` with your tenant name from the Identity Platform Dashboard tenant URL.

    ## HTTP Verbs
    - **GET**: Retrieve a resource or collection of resources
    - **POST**: Create a resource
    - **PATCH**: Modify an existing resource
    - **PUT**: Replace an existing resource
    - **DELETE**: Delete a resource

    ## Request and Response Format
    - Use `Content-Type: application/json` for all PUT and POST requests (except when uploading documents or live photos, in which case, use `Content-Type: multipart/form-data`).
    - Responses return JSON, except for downloads.
    - Text fields support UTF-8 encoding but certain special characters are not allowed.
  version: 1.0.0
servers:
  - url: https://5yhs323cfd.execute-api.ap-south-1.amazonaws.com/platform
    description: API server
    variables:
      tenant_name:
        default: TENANT_NAME
        description: Replace with the tenant name in your Identity Platform Dashboard URL.
paths:
  /api/v1/requests:
    get:
      summary: Requests listing
      description: Get the verification requests
      operationId: listRequests
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `app`
              - `request_status`
              - `customer_reference`
              - `client_id`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by request app
              value: '[{ "app": { "op": "eq","values": [ "ONFIDO" ] } }]'
            example2:
              summary: Filter by request status
              value: '[{ "request_status": { "op": "in","values": [ "ACTIVE", "INACTIVE" ] } }]'
            example3:
              summary: Filter by app and request status
              value: '[{ "app": { "op": "like","values": [ "ONFIDO" ] } }, { "status": { "op": "eq","values": [ "ACTIVE" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "org_name,desc"
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `app`
              - `request_status`
              - `customer_reference`
              - `client_id`
              - `created_at`
              - `updated_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of request with pagination details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestPaginatedResponse"
        "400":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"

  /api/v1/requests/{request_id}:
    get:
      summary: Retrieve request
      description: Get details of a request.
      operationId: getRequest
      tags:
        - Request
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: string
          description: Unique reference of the request
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Request details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestDetailDto'
        '400':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'

  /api/v1/requests/{request_id}/executions/{execution_id}/review:
    post:
      summary: Review request execution
      description: Submit a review decision for a specific execution within a request.
      operationId: reviewRequestExecution
      tags:
        - Request
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the request.
        - name: execution_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the request execution.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - decision
              properties:
                decision:
                  type: string
                  enum:
                    - APPROVE
                    - REJECT
                  description: Decision for the review, either APPROVE or REJECT.
                reason:
                  type: string
                  description: Reason for the decision.
                note:
                  type: string
                  description: Additional notes.
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: List of attachment files.
      responses:
        '200':
          description: Review submitted successfully.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  
  /api/v1/reasons:
    get:
      summary: Retrieve a list of reasons
      description: Get a list of all reasons.
      operationId: listReasons
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```
            
            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `name`
              - `description`
              - `app`
              - `organization_id`
            
            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between
            
            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by reason name
              value: '[{ "name": { "op": "like", "values": [ "Sample Reason" ] } }]'
            example2:
              summary: Filter by application name
              value: '[{ "app": { "op": "eq", "values": [ "ONFIDO" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "name,asc"
          description: |-
            Format is `sortFieldName,direction`.
            
            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `description`
              - `app`
            
            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        '200':
          description: A list of reasons with pagination details
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ReasonPaginatedResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    post:
      summary: Create a new reason
      description: Create a new reason with the provided details.
      operationId: createReason
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the reason
                  example: mule
                description:
                  type: string
                  description: A detailed description of the reason
                  example: This is used for sample purposes.
                app:
                  type: string
                  description: The application associated with the reason
                  example: ONFIDO
              required:
                - name
                - app
      responses:
        '201':
          description: Reason created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'

  /api/v1/reasons/{id}:
    get:
      summary: Retrieve a reason by ID
      description: Get details of a specific reason.
      operationId: getReason
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the reason
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Reason details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    put:
      summary: Update an existing reason
      description: Update the details of a specific reason.
      operationId: updateReason
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the reason
          example: 123e4567-e89b-12d3-a456-426614174000
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the reason
                  example: mule
                description:
                  type: string
                  description: A detailed description of the reason
                  example: This is used for sample purposes.
                app:
                  type: string
                  description: The application associated with the reason
                  example: ONFIDO
      responses:
        '200':
          description: Reason updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'

    delete:
      summary: Delete a reason
      description: Delete a specific reason.
      operationId: deleteReason
      tags:
        - Reason
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the reason
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: header
          name: channelid
          required: true
          schema:
            type: string
          description: The channel ID
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Reason deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RequestDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the request
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        app:
          type: string
          description: Request app
          example: ONFIDO
        request_status:
          type: string
          description: Status of the request
          enum:
            - AWAITING_INPUT
            - PROCESSING
            - REVIEW
            - APPROVED
            - DECLINED
            - ERROR
            - EXPIRED
          example: APPROVED
        customer_reference:
          type: string
          description: Unique identifier from channel request
          example: "6722406b-e823-40a0-b691-ea187a1e364d"
        metadata:
          type: object
          description: Dynamic request information sent based on app
        channel_id:
          type: string
          description: Request belong to which channel
          example: "6722406b-e823-40a0-b691-ea187a1e364d"
        channel_name:
          type: string
          example: name for the client

    RequestDetailDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the request
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        app:
          type: string
          description: Request app
          example: ONFIDO
        request_status:
          type: string
          description: Status of the request
          enum:
            - AWAITING_INPUT
            - PROCESSING
            - REVIEW
            - APPROVED
            - DECLINED
            - ERROR
            - EXPIRED
          example: APPROVED
        customer_reference:
          type: string
          description: Unique identifier from channel request
          example: "6722406b-e823-40a0-b691-ea187a1e364d"
        metadata:
          type: object
          description: Dynamic request information sent based on app
        channel_id:
          type: string
          description: Request belong to which channel
          example: "6722406b-e823-40a0-b691-ea187a1e364d"
        request_executions:
          type: array
          description: Request execution details
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique identifier for the request execution
                example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
              created_at:
                type: string
                format: date-time
                example: "2021-02-01T12:34:56Z"
              updated_at:
                type: string
                format: date-time
                example: "2021-02-01T12:34:56Z"
              execution_status:
                type: string
                description: Status for the request execution (PROCESSINS, SUCCESS, ERROR)
                example: PROCESSING
              summary:
                type: object
                description: Dynamic basic result details of the response
              result:
                type: object
                description: Dynamic full result details of the response
              full_details_ready:
                type: boolean
                description: Indication of the readiness of result
              credentials:
                type: object
                description: Dynamic credential of the response
              app:
                type: string
                description: Request app
                example: ONFIDO
              channel_id:
                type: string
                description: Request belong to which channel
                example: "6722406b-e823-40a0-b691-ea187a1e364d"
              reference_id:
                type: string
                description: Request belong to which workflow
                example: "6722406b-e823-40a0-b691-ea187a1e364d"
              request_execution_reasons:
                type: array
                description: Reason on failed request
                items:
                  type: object
                  properties:
                    reason:
                      type: string
                      description: Reason text on request rejected
                    manual_review:
                      type: boolean
                      description: Indication request is manual/auto rejected
        channel_name:
          type: string
          example: name for the client

    RequestPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/RequestDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    GlobalErrorResponseDto:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error occurred
          example: "2024-10-07T16:51:24.595+08:00"
        status:
          type: integer
          description: Error code indicating the issue
        message:
          type: string
          description: Error message that describes the issue
        path:
          type: string
          description: The endpoint path where the error occurred
          example: "/v1/requests"
    ReasonPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ReasonDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    ReasonDto:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the reason
          example: c2d35161-b8a9-47c8-88d2-7f6fcd29c561
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        name:
          type: string
          description: The name of the reason
          example: mule
        description:
          type: string
          description: A detailed description of the reason
          example: Scam report on this account
        channel_id:
          type: string
          description: Id of the organization
          example: e2d76212-b8a9-63c8-69d2-7f6fcd42c532
        app:
          type: string
          description: Application of the organization
          example: ONFIDO