openapi: 3.0.3
info:
  title: OAuth 2.0 Token API
  description: API for obtaining OAuth 2.0 tokens using password grant.
  version: 1.0.0
servers:
  - url: https://5yhs323cfd.execute-api.ap-south-1.amazonaws.com/api
    description: Production server
paths:
  /auth/realms/rdi-portal/protocol/openid-connect/token:
    post:
      summary: Generate an access token or refresh tokens
      description: |
        This endpoint issues an OAuth 2.0 token. The behavior of the endpoint depends on the `grant_type`:
        - Use `grant_type=password` to obtain an access token.
        - Use `grant_type=refresh_token` to obtain a new set of tokens with an existing refresh token.
      operationId: generateAccessToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/PasswordGrant'
                - $ref: '#/components/schemas/RefreshTokenGrant'
      responses:
        "200":
          description: Successful response with OAuth 2.0 tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The OAuth 2.0 access token.
                    example: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIxOW...
                  expires_in:
                    type: integer
                    description: The number of seconds until the access token expires.
                    example: 299
                  refresh_expires_in:
                    type: integer
                    description: The number of seconds until the refresh token expires.
                    example: 1799
                  refresh_token:
                    type: string
                    description: The OAuth 2.0 refresh token.
                    example: eyJhbGciOiJIUzUxMiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIx...
                  token_type:
                    type: string
                    description: The type of token (e.g., "Bearer").
                    example: Bearer
                  not-before-policy:
                    type: integer
                    example: 0
                  session_state:
                    type: string
                    description: Session state identifier.
                    example: bac70a91-02cb-4e24-877a-85e90cd7ecef
                  scope:
                    type: string
                    description: The granted scopes for this token.
                    example: email profile
        "400":
          description: Invalid request (e.g., missing or invalid parameters).
        "401":
          description: Unauthorized (e.g., invalid client credentials).
      security:
        - basicAuth: []

components:
  schemas:
    Role:
      type: string
      enum:
        - admin
        - org_user
        - viewer
        - editor
        - owner
      description: Possible roles assigned to the user.
    PasswordGrant:
      type: object
      properties:
        grant_type:
          type: string
          description: |
            The OAuth 2.0 grant type. Use `"password"` for obtaining a new access token.
          enum:
            - password
        username:
          type: string
          description: The user's username.
        password:
          type: string
          description: The user's password.
      required:
        - grant_type
        - username
        - password
    RefreshTokenGrant:
      type: object
      description: "Grant type: **Refresh Token**. Required parameter: `refresh_token`."
      properties:
        grant_type:
          type: string
          description: |
            The OAuth 2.0 grant type. Use `"refresh_token"` for obtaining a new set of tokens with an existing refresh token.
          enum:
            - refresh_token
        refresh_token:
          type: string
          description: The refresh token obtained from a previous authorization request.
      required:
        - grant_type
        - refresh_token
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
