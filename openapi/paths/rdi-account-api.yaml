openapi: 3.0.3
info:
  title: Channel Management API
  description: API for managing channels.
  version: 1.0.0
servers:
  - url: https://5yhs323cfd.execute-api.ap-south-1.amazonaws.com/api
paths:
  /api/v1/channels:
    get:
      summary: Channels listing
      description: Get all channels
      operationId: listChannels
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `name`
              - `note`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by channel name
              value: '[{ "name": { "op": "eq","values": [ "Be U" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "name,desc"
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `note`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of channels with pagination details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelPaginatedResponse"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    post:
      summary: Create a new channel
      description: Create a new channel with the provided details.
      operationId: createChannel
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of the Channel
                  example: Ekyc channel
                note:
                  type: string
                  description: Note about the Channel
                  example: Channel for performing ekyc
      responses:
        '201':
          description: Channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/channels/{channel_id}:
    get:
      summary: Retrieve channel
      description: Get details of a channel.
      operationId: getChannel
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '200':
          description: Channel details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    put:
      summary: Update an existing channel
      description: Update the details of a specific channel.
      operationId: updateChannel
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of the Channel
                  example: Ekyc channel
                note:
                  type: string
                  description: Note about the Channel
                  example: Channel for performing ekyc
      responses:
        '200':
          description: Channel updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelDto'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete a channel
      description: Delete a specific channel.
      operationId: deleteChannel
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        '204':
          description: Channel deleted successfully
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/channels/{channel_id}/api-keys:
    get:
      summary: Channel keys listing
      description: Get all keys of the channel
      operationId: listChannelApiKeys
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `api_key`
              - `expires_at`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by expiry
              value: '[{ "expires_at": { "op": "lt","values": [ "2024-10-23T07:50:34.394Z" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "id,desc"
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `api_key`
              - `expires_at`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of channel keys with pagination details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelKeyPaginatedResponse"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    post:
      summary: Create a key for channel
      description: Create a key for channel with the provided details.
      operationId: createChannelApiKey
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "201":
          description: Channel key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelKeyDto'
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/channels/{channel_id}/api-keys/{id}:
    delete:
      summary: Delete a key for channel
      description: Delete a key for channel.
      operationId: deleteChannelApiKey
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the key
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "204":
          description: Channel key deleted successfully
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/channels/{channel_id}/apps:
    get:
      summary: List all installed apps for channel
      description: List all installed apps for channel.
      operationId: listInstalledChannelApps
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: A list of installed apps for the channel
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChannelAppDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    post:
      summary: Install apps for channel
      description: Install apps for channel.
      operationId: installChannelApp
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        description: App details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - app_name
              properties:
                app_name:
                  description: Selected app
                  type: string
                  example: "ONFIDO"
                  enum:
                    - ONFIDO
                    - JUMIO
                app_api_key:
                  type: string
                  description: Api key of the app
                  example: api_sandbox.57u0VjSqlPh.9yyhfdGevnANkRbLxBzufrSlEz6xTO8t
      responses:
        "201":
          description: App installed for channel successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelAppDto'
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/channels/{channel_id}/apps/{id}:
    delete:
      summary: Uninstall apps for channel
      description: Uninstall apps for channel.
      operationId: uninstallChannelApp
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique reference of the channel
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique reference of the app
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        "204":
          description: Apps uninstalled successfully
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    put:
      summary: Update apps details for channel
      description: Update apps details for channel.
      operationId: updateChannelAppDetails
      tags:
        - Channel
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel app
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        description: App details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                app_api_key:
                  type: string
                  description: Api key of the app
                  example: api_sandbox.57u0VjSqlPh.9yyhfdGevnANkRbLxBzufrSlEz6xTO8t
                app_properties:
                  description: Custom properties of the app
                  type: object
                  example:
                    policy.onfido.similarity_score_threshold: 0.8
                  properties:
                    policy.onfido.similarity_score_threshold:
                      type: number
                      description: |-
                        Valid for `ONFIDO` app only. The minimum similarity score required for a successful verification.
      responses:
        "200":
          description: Channel app updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelAppDto'
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/channels/{channel_id}/collaborators:
    get:
      summary: Retrieve a list of collaborators under the channel
      description: Retrieve a list of collaborators under the channel.
      operationId: listCollaborators
      tags:
        - Collaborator
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `account.name`
              - `account.email`
              - `access_scope`
              - `api_token`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by collaborators email
              value: '[{ "account.email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by collaborators name
              value: '[{ "account.name": { "op": "like","values": [ "Kent" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "account.email,desc"
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `account.name`
              - `account.email`
              - `access_scope`
              - `api_token`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of collaborators with pagination details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollaboratorsPaginatedResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    post:
      summary: Invite new collaborator
      description: Invite new collaborator
      operationId: inviteCollaborator
      tags:
        - Collaborator
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        description: Invite new collaborator details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - access_scope
              properties:
                email:
                  type: string
                  description: Email of the collaborator
                  example: kent@reldyn.co
                access_scope:
                  description: Selected access scope of the collaborator
                  type: string
                  enum:
                    - editor
                    - viewer
                  example: "viewer"
      responses:
        "201":
          description: Collaborator invited successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelCollaboratorDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/channels/{channel_id}/collaborators/{collaborator_id}:
    get:
      summary: Get collaborator details
      description: Get collaborator details.
      operationId: getCollaborator
      tags:
        - Collaborator
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: path
          name: collaborator_id
          required: true
          schema:
            type: string
          description: Unique identifier for the collaborator
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      responses:
        "200":
          description: Collaborator details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelCollaboratorDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    put:
      summary: Update collaborator details
      description: Update collaborator details.
      operationId: updateCollaborator
      tags:
        - Collaborator
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: path
          name: collaborator_id
          required: true
          schema:
            type: string
          description: Unique identifier for the collaborator
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      requestBody:
        description: Updated collaborator details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - access_scope
              properties:
                access_scope:
                  description: Selected access scope of the collaborator
                  type: string
                  enum:
                    - editor
                    - viewer
                  example: "viewer"
      responses:
        "200":
          description: Collaborator updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelCollaboratorDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    delete:
      summary: Remove collaborator from channel
      description: remove collaborator from channel.
      operationId: removeCollaborator
      tags:
        - Collaborator
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
          description: Unique identifier of the channel
          example: "123e4567-e89b-12d3-a456-426614174000"
        - in: path
          name: collaborator_id
          required: true
          schema:
            type: string
          description: Unique identifier for the collaborator
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      responses:
        "204":
          description: Collaborator removed successfully
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/accounts:
    get:
      summary: Retrieve a list of accounts
      description: Retrieve a list of accounts.
      operationId: listAccounts
      tags:
        - Account
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by account email
              value: '[{ "email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by account name
              value: '[{ "name": { "op": "like","values": [ "Kent" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "name,desc"
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of accounts with pagination details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountsPaginatedResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    post:
      summary: Create a new account
      description: Create a new account with the provided details.
      operationId: createAccount
      tags:
        - Account
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: MohammedAli
                email:
                  type: string
                  description: Email of the user
                  example: ali@reldyn.co
                password:
                  type: string
                  description: Password of the user
                  example: 123456
                realm_role:
                  type: string
                  description: Realm role of the user
                  enum:
                    - admin
                    - channel_user
                  example: channel_user
              required:
                - name
                - email
                - password
                - realm_role
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/accounts/{account_id}:
    get:
      summary: Retrieve an account by ID
      description: Get details of a specific account.
      operationId: getAccountById
      tags:
        - Account
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier of the account
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Account details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    put:
      summary: Update an existing account
      description: Update the details of a specific account.
      operationId: updateAccount
      tags:
        - Account
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier of the account to update.
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: MohammedAli
                email:
                  type: string
                  description: Email of the user
                  example: ali@reldyn.co
                password:
                  type: string
                  description: Password of the user
                  example: 123456
                realm_role:
                  type: string
                  description: Realm role of the user
                  enum:
                    - admin
                    - channel_user
                  example: channel_user
              required:
                - name
                - email
                - realm_role
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
    delete:
      summary: Delete an account
      description: Delete a specific account.
      operationId: deleteAccount
      tags:
        - Account
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
            description: Unique identifier of the account.
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Account deleted successfully.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
  /api/v1/accounts/{account_id}/collaborations:
    get:
      summary: Retrieve account's collaborations
      description: Retrieve account's collaborations.
      operationId: listAccountCollaborations
      tags:
        - Account
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: string
            description: Unique identifier of the account.
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: A list of channels with pagination details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CollaborationDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/collaborations:
    get:
      summary: Retrieve a list of channels related to the currently logged-in user
      description: Retrieve a list of channels related to the currently logged-in user.
      operationId: listCollaborations
      tags:
        - Collaboration
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of channels with pagination details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CollaborationDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/apps:
    get:
      summary: List all available apps
      description: List all available apps.
      operationId: listApps
      tags:
        - Configuration
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: A list of available apps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/me:
    get:
      summary: Retrieves the authenticated user's information
      operationId: getUser
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"

  /api/v1/change-password:
    post:
      summary: Change user password
      description: Endpoint for updating the user's password
      operationId: changePassword
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        "204":
          description: Password changed successfully
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /api/v1/logout:
    post:
      summary: Proceed logout from current account
      operationId: logout
      tags:
        - Authentication
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Logout successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalErrorResponseDto'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AccountDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this user
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this user
          example: Foo
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        last_login_time:
          type: string
          format: date-time
          description: Last login time of the user
          example: "2021-02-01T12:34:56Z"
        realm_role:
          type: string
          description: Realm role of the user
          enum:
            - admin
            - channel_user
          example: channel_user
    AppDto:
      type: object
      properties:
        app_name:
          type: string
          description: Name of the app
          example: ONFIDO
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this app
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this app
          example: Foo
        description:
          type: string
          description: Description of the app
          example: Onfido application for performing ekyc
        logo:
          type: string
          description: Logo url of the app
          example: https://s3.ap-south-1.amazonaws.com/logo.jpg
    ChannelDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the channel
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this app
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this app
          example: Foo
        name:
          type: string
          description: Name of the channel
          example: Ekyc channel
        note:
          type: string
          description: Note about the channel
          example: Channel for performing ekyc
        apps:
          type: array
          description: List of apps associated with the channel
          items:
            $ref: '#/components/schemas/ChannelAppDto'
    ChannelAppDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the channel app
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this app
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this app
          example: Foo
        app_name:
          type: string
          description: Name of the app
          example: ONFIDO
        app_api_key:
          type: string
          description: Api Key of the app
          example: api_sandbox.57u0VjSqlPh.9yyhfdGevnANkRbLxBzufrSlEz6xTO8t
        app_properties:
          type: object
          description: Custom properties of the app
          example:
            policy.onfido.similarity_score_threshold: 0.8
    ChannelCollaboratorDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the collaborator
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this collaborator
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this collaborator
          example: Foo
        name:
          type: string
          description: Name of the collaborator
          example: Kent
        email:
          type: string
          description: Email of the collaborator
          example: kent@reldyn.co
        account_id:
          type: string
          description: Account id of the collaborator
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        access_scope:
          type: string
          description: Access rights granted to the collaborator within the channel
          enum:
            - editor
            - viewer
          example: viewer
    ChannelKeyDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the key
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        api_key:
          type: string
          description: Key generated for channel
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1NmYwOGEyOS1lNmMxLTQzMzYtOWZmYy05MjgzZjYwYWUyZDIifQ.YxO2390uoSX566s6z2PZnNy10VPe5gAaWKEgaxFypZ4
        expires_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
    CollaborationDto:
      type: object
      properties:
        channel_id:
          type: string
          description: Unique identifier for the channel
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        channel_name:
          type: string
          description: Name of the channel
          example: Be U
        access_scope:
          type: string
          description: Access rights granted to the collaborator within the channel
          enum:
            - editor
            - viewer
          example: viewer
        apps:
          type: array
          items:
            $ref: '#/components/schemas/AppDto'
    GlobalErrorResponseDto:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error occurred
          example: "2024-10-07T16:51:24.595+08:00"
        status:
          type: integer
          description: Error code indicating the issue
        message:
          type: string
          description: Error message that describes the issue
        path:
          type: string
          description: The endpoint path where the error occurred
          example: "/api/v1/channels"
    AccountsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/AccountDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    ChannelPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ChannelDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    CollaboratorsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ChannelCollaboratorDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    ChannelKeyPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ChannelKeyDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    UserDetail:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        realm_role:
          type: string
          description: Realm role of the user
          enum:
            - admin
            - channel_user
          example: channel_user
    ChangePasswordRequest:
      type: object
      properties:
        password:
          type: string
          description: The new password for the user
          example: "new_password123"
        confirm_password:
          type: string
          description: Confirmation of the new password
          example: "new_password123"
      required:
        - password
        - confirm_password