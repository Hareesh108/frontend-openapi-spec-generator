openapi: 3.0.3
info:
  title: Organization Management API
  description: API for managing organizations.
  version: 1.0.0
servers:
  - url: https://bbr2xbhs2f.execute-api.ap-south-1.amazonaws.com/api
paths:
  /v1/admins/organizations:
    post:
      summary: Create a new organization
      description: Creates a new organization.
      operationId: createOrganization
      tags:
        - Admins
      requestBody:
        description: Organization creation details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - org_name
                - org_registration_no
              properties:
                org_name:
                  type: string
                  description: Name of the organization
                  example: Bank Islam
                org_registration_no:
                  type: string
                  description: Registration no of the organization
                  example: 1234567890
                org_contact_no:
                  type: string
                  description: Contact phone number for the organization
                  example: "+601234567890"
                org_contact_name:
                  type: string
                  description: Contact name for the organization
                  example: Darren
                org_email:
                  type: string
                  format: email
                  description: Contact email for the organization
                  example: beu@beu.com
                note:
                  type: string
                  description: Note for the organization
                  example: This organization focuses on providing technology solutions for various industries.
                apps:
                  description: Selected app
                  type: array
                  uniqueItems: true
                  items:
                    type: string
                    example: "ONFIDO"
                    enum:
                      - ONFIDO
                      - JUMIO
      responses:
        "201":
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    get:
      summary: Retrieve a list of organizations
      description: Retrieves a list of all organizations.
      operationId: listOrganizations
      tags:
        - Admins
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```
            
            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `org_name`
              - `org_registration_no`
              - `org_status`
              - `org_contact_no`
              - `org_contact_name`
              - `org_email`
              - `note`
              - `org_logo_url`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`
            
            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between
            
            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by organization email
              value: '[{ "org_email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by organization name
              value: '[{ "org_name": { "op": "like","values": [ "Bank Islam" ] } }]'
            example3:
              summary: Filter by active status
              value: '[{ "org_status": { "op": "in","values": [ "ACTIVE", "INACTIVE" ] } }]'
            example4:
              summary: Filter by organization name and org_registration_no
              value: '[{ "org_name": { "op": "like","values": [ "Bank Islam" ] } }, { "org_registration_no": { "op": "eq","values": [ "1234567890" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "org_name,desc"
          description: |-
            Format is `sortFieldName,direction`.
            
            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `org_name`
              - `org_registration_no`
              - `org_status`
              - `org_contact_no`
              - `org_contact_name`
              - `org_email`
              - `note`
              - `org_logo_url`
              - `created_by`
              - `created_at`
              - `updated_by`
              - `updated_at`
            
            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of organizations with pagination details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationsPaginatedResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /v1/admins/organizations/{organization_id}:
    get:
      summary: Retrieve a single organization
      description: Retrieves details of a single organization by its ID.
      operationId: getOrganization
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        "200":
          description: Organization details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    put:
      summary: Update an organization
      description: Updates details of an existing organization.
      operationId: updateOrganization
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Updated organization details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                org_name:
                  type: string
                  description: Name of the organization
                  example: Bank Islam
                org_registration_no:
                  type: string
                  description: Registration no of the organization
                  example: 1234567890
                org_status:
                  type: string
                  description: Status of the organization (e.g., active, inactive)
                  enum:
                    - ACTIVE
                    - INACTIVE
                  example: ACTIVE
                org_contact_no:
                  type: string
                  description: Contact phone number for the organization
                  example: "+601234567890"
                org_contact_name:
                  type: string
                  description: Contact name for the organization
                  example: Darren
                org_email:
                  type: string
                  format: email
                  description: Contact email for the organization
                  example: beu@beu.com
                note:
                  type: string
                  description: Note for the organization
                  example: This organization focuses on providing technology solutions for various industries.
                org_logo_url:
                  type: string
                  description: Logo url for the organization
                  example: https://s3.ap-south-1.amazonaws.com/logo.jpg
      responses:
        "200":
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    delete:
      summary: Delete an organization
      description: Deletes an existing organization by id.
      operationId: deleteOrganization
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      responses:
        "204":
          description: Organization deleted successfully
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /v1/admins/organizations/{organization_id}/apps:
    post:
      summary: Install the apps
      description: Install the apps.
      operationId: installApps
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      requestBody:
        description: App details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apps
              properties:
                apps:
                  description: Selected app
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: string
                    example: "ONFIDO"
                    enum:
                      - ONFIDO
                      - JUMIO
      responses:
        "201":
          description: App installed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrgAppDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /v1/admins/organizations/{organization_id}/apps/{app_id}:
    put:
      summary: Update apps details
      description: Updates apps details
      operationId: updateApps
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Unique identifier for the apps
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      requestBody:
        description: Updated apps details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                default_app_properties:
                  description: Custom properties of the app
                  type: object
                  example:
                    onfido.similarity_score_threshold: 0.8
                    onfido.similarity_checking_flag: false
                app_api_key:
                  type: string
                  description: Api Key of the app
                  example: api_sandbox.57u0VjSqHpL.8yyhfdGevnAEkRbLkBzufrSlEz6xTO8j
      responses:
        "200":
          description: Apps details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgAppDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    delete:
      summary: Uninstalls apps
      description: Uninstalls apps.
      operationId: uninstallApps
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
        - in: path
          name: app_id
          required: true
          schema:
            type: string
          description: Unique identifier for the apps
          example: d6f7ab5f-43c6-433d-98cc-dd253acb21a3
      responses:
        "204":
          description: Apps uninstalled successfully
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /v1/admins/organizations/{organization_id}/images:
    post:
      summary: Upload organization's logo
      description: Upload organization's logo
      operationId: uploadOrganizationLogo
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The image file to upload
      responses:
        "201":
          description: Organization's logo uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    delete:
      summary: Delete organization's logo
      description: Delete organization's logo
      operationId: deleteOrganizationLogo
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      responses:
        "204":
          description: Organization's logo deleted successfully
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /v1/admins/organizations/{organization_id}/collaborators:
    get:
      summary: Retrieve a list of collaborators under the organization
      description: Retrieve a list of collaborators under the organization.
      operationId: listCollaborators
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```
            
            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`
            
            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between
            
            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by collaborators email
              value: '[{ "email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by collaborators name
              value: '[{ "name": { "op": "like","values": [ "Kent" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "name,desc"
          description: |-
            Format is `sortFieldName,direction`.
            
            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`
            
            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of collaborators with pagination details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountsWithAccessScopeInfoPaginatedResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    post:
      summary: Create a new account / Link an existing account
      description: Creates a new account / Link an existing account.
      operationId: createAccount
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      requestBody:
        description: Account creation / linking details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - access_scope
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: Kent
                email:
                  type: string
                  description: Email of the user
                  example: kent@reldyn.co
                password:
                  type: string
                  description: Password of the user
                  example: Kent123456
                access_scope:
                  description: Selected access scope of the user
                  type: string
                  example: "viewer"
                account_id:
                  description: Account id of an existing user for linking account
                  type: string
                  example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountWithAccessScopeInfoDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /v1/admins/organizations/{organization_id}/collaborators/{account_id}:
    put:
      summary: Update account details
      description: Update account details.
      operationId: updateAccount
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier for the account
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      requestBody:
        description: Updated Account details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - access_scope
              properties:
                name:
                  type: string
                  description: Name of the user
                  example: Kent
                email:
                  type: string
                  description: Email of the user
                  example: kent@reldyn.co
                access_scope:
                  description: Selected access scope of the user
                  type: string
                  example: "viewer"
      responses:
        "200":
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountWithAccessScopeInfoDto"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
    delete:
      summary: Delete account from organization
      description: Delete account from organization.
      operationId: deleteAccount
      tags:
        - Admins
      parameters:
        - in: path
          name: organization_id
          required: true
          schema:
            type: string
          description: Unique identifier for the organization
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
        - in: path
          name: account_id
          required: true
          schema:
            type: string
          description: Unique identifier for the account
          example: "d6f7ab5f-43c6-433d-98cc-dd253acb21a3"
      responses:
        "204":
          description: Account deleted successfully
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
  /v1/admins/accounts:
    get:
      summary: Retrieve a list of accounts
      description: Retrieve a list of accounts.
      operationId: listAccounts
      tags:
        - Admins
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |-
            Format is:
            ```json
            [
              {
                "filterFieldName": {
                  "op": "operator",
                  "values": ["value"]
                }
              }
            ]
            ```

            **Where:**
            - **filterFieldName**: The field to filter by. Possible values include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`

            - **operator**: The operation to perform. Possible options are:
              - `eq`: Equals
              - `!eq`: Not equal
              - `in`: In
              - `!in`: Not in
              - `like`: Like
              - `!like`: Not like
              - `gt`: Greater than
              - `gte`: Greater than or equal to
              - `lt`: Less than
              - `lte`: Less than or equal to
              - `btw`: Between
              - `!btw`: Not between

            - **value**: The value(s) used for filtering.
              - If the operator supports multiple values (e.g., `in`, `!in`, `btw`, `!btw`), this should be an array of values.
              - For operators that expect a single value (e.g., `eq`, `!eq`, `like`, `!like`, `gt`, `gte`, `lt`, `lte`), provide a single value in the array.
              - Accepted types for values include strings, numbers, or dates (in ISO 8601 format), depending on the field being filtered.
          examples:
            example1:
              summary: Filter by account email
              value: '[{ "email": { "op": "eq","values": [ "kent@reldyn.co" ] } }]'
            example2:
              summary: Filter by account name
              value: '[{ "name": { "op": "like","values": [ "Kent" ] } }]'
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number to retrieve (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: The number of items to retrieve per page
        - in: query
          name: sort
          schema:
            type: array
            items:
              type: string
              example: "name,desc"
          description: |-
            Format is `sortFieldName,direction`.

            **Where:**
            - **sortFieldName**: The field to sort by. Possible values include:
              - `id`
              - `name`
              - `email`
              - `last_login_time`

            - **direction**: The sorting order. Possible values are:
              - `asc`: Sort in ascending order
              - `desc`: Sort in descending order
      responses:
        "200":
          description: A list of accounts with pagination details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountsPaginatedResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalErrorResponseDto"
components:
  schemas:
    OrganizationDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the organization
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this organization
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this organization
          example: Foo
        org_name:
          type: string
          description: Name of the organization
          example: Bank Islam
        org_registration_no:
          type: string
          description: Registration no of the organization
          example: 1234567890
        org_status:
          type: string
          description: Status of the organization (e.g., active, inactive)
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
        org_primary_account_id:
          type: string
          description: Foreign key referencing the primary account associated with the organization
          example: "6722406b-e823-40a0-b691-ea187a1e364d"
        org_contact_no:
          type: string
          description: Contact phone number for the organization
          example: "+601234567890"
        org_contact_name:
          type: string
          description: Contact name for the organization
          example: Darren
        org_email:
          type: string
          format: email
          description: Contact email for the organization
          example: beu@beu.com
        note:
          type: string
          description: Note for the organization
          example: This organization focuses on providing technology solutions for various industries.
        org_logo_url:
          type: string
          description: Logo url for the organization
          example: https://s3.ap-south-1.amazonaws.com/logo.jpg
        apps:
          type: array
          items:
            $ref: "#/components/schemas/OrgAppDto"
    OrgAppDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the app
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this app
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this app
          example: Foo
        app_name:
          type: string
          description: Name of the app
          example: ONFIDO
        default_app_properties:
          description: Custom properties of the app
          type: object
          example:
            onfido.similarity_score_threshold: 0.8
            onfido.similarity_checking_flag: false
        app_api_key:
          type: string
          description: Api Key of the app
          example: api_sandbox.57u0VjSqHpL.8yyhfdGevnAEkRbLkBzufrSlEz6xTO8j
    OrgClientDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the client
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this client
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this client
          example: Foo
        name:
          type: string
          description: Name of the client
          example: Be U
        note:
          type: string
          description: Note for the organization
          example: Be U client
    AccountDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this user
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this user
          example: Foo
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        last_login_time:
          type: string
          format: date-time
          description: Last login time of the user
          example: "2021-02-01T12:34:56Z"
    AccountWithAccessScopeInfoDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: 9b434c1b-a9c6-42b3-8020-ff9fed9ec42a
        created_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        created_by:
          type: string
          description: Name of the user that created this user
          example: Foo
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T12:34:56Z"
        updated_by:
          type: string
          description: Name of the user that last updated this user
          example: Foo
        name:
          type: string
          description: Name of the user
          example: Kent
        email:
          type: string
          description: Email of the user
          example: kent@reldyn.co
        last_login_time:
          type: string
          format: date-time
          description: Last login time of the user
          example: "2021-02-01T12:34:56Z"
        access_scope:
          type: string
          description: Access rights granted to the user within the organization
          example: viewer
    GlobalErrorResponseDto:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error occurred
          example: "2024-10-07T16:51:24.595+08:00"
        status:
          type: integer
          description: Error code indicating the issue
        message:
          type: string
          description: Error message that describes the issue
        path:
          type: string
          description: The endpoint path where the error occurred
          example: "/v1/organizations"
    OrganizationsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/OrganizationDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    AccountsPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/AccountDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false
    AccountsWithAccessScopeInfoPaginatedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/AccountWithAccessScopeInfoDto"
        number:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 1
        last:
          type: boolean
          example: true
        first:
          type: boolean
          example: true
        total_pages:
          type: integer
          example: 1
        number_of_elements:
          type: integer
          example: 1
        empty:
          type: boolean
          example: false